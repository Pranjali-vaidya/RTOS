
Assign1Question2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004350  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080044e0  080044e0  000054e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004598  08004598  00006060  2**0
                  CONTENTS
  4 .ARM          00000008  08004598  08004598  00005598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045a0  080045a0  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045a0  080045a0  000055a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080045a4  080045a4  000055a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080045a8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006060  2**0
                  CONTENTS
 10 .bss          00004234  20000060  20000060  00006060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004294  20004294  00006060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 13 .debug_info   000158a0  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003075  00000000  00000000  0001b930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001270  00000000  00000000  0001e9a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e5c  00000000  00000000  0001fc18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000240fa  00000000  00000000  00020a74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001462d  00000000  00000000  00044b6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e09dc  00000000  00000000  0005919b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00139b77  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005018  00000000  00000000  00139bbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  0013ebd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080044c8 	.word	0x080044c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	080044c8 	.word	0x080044c8

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004c0:	b480      	push	{r7}
 80004c2:	b085      	sub	sp, #20
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	60f8      	str	r0, [r7, #12]
 80004c8:	60b9      	str	r1, [r7, #8]
 80004ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	4a07      	ldr	r2, [pc, #28]	@ (80004ec <vApplicationGetIdleTaskMemory+0x2c>)
 80004d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004d2:	68bb      	ldr	r3, [r7, #8]
 80004d4:	4a06      	ldr	r2, [pc, #24]	@ (80004f0 <vApplicationGetIdleTaskMemory+0x30>)
 80004d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	2280      	movs	r2, #128	@ 0x80
 80004dc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004de:	bf00      	nop
 80004e0:	3714      	adds	r7, #20
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	2000007c 	.word	0x2000007c
 80004f0:	2000011c 	.word	0x2000011c

080004f4 <vLedTask.0>:
  */
int main(void)
{

  /* USER CODE BEGIN 1 */
	void vLedTask(void *pvParameters) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	f8c7 c000 	str.w	ip, [r7]
	    uint16_t ledPin = *((uint16_t *) pvParameters);  // LED pin
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	881b      	ldrh	r3, [r3, #0]
 8000504:	81fb      	strh	r3, [r7, #14]
	    uint32_t rate = *((uint32_t *) (pvParameters + sizeof(uint16_t))); // Rate (ms)
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800050c:	60bb      	str	r3, [r7, #8]

	    while (1) {
	        HAL_GPIO_TogglePin(LED_GPIO_PORT, ledPin);  // Toggle the LED
 800050e:	89fb      	ldrh	r3, [r7, #14]
 8000510:	4619      	mov	r1, r3
 8000512:	4804      	ldr	r0, [pc, #16]	@ (8000524 <vLedTask.0+0x30>)
 8000514:	f001 f8ff 	bl	8001716 <HAL_GPIO_TogglePin>
	        osDelay(rate);  // Wait for the specified rate
 8000518:	68b8      	ldr	r0, [r7, #8]
 800051a:	f002 fbb2 	bl	8002c82 <osDelay>
	        HAL_GPIO_TogglePin(LED_GPIO_PORT, ledPin);  // Toggle the LED
 800051e:	bf00      	nop
 8000520:	e7f5      	b.n	800050e <vLedTask.0+0x1a>
 8000522:	bf00      	nop
 8000524:	40021800 	.word	0x40021800

08000528 <main>:
{
 8000528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800052a:	b097      	sub	sp, #92	@ 0x5c
 800052c:	af02      	add	r7, sp, #8
int main(void)
 800052e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000532:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000534:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000538:	f107 053c 	add.w	r5, r7, #60	@ 0x3c
 800053c:	4b5f      	ldr	r3, [pc, #380]	@ (80006bc <main+0x194>)
 800053e:	4626      	mov	r6, r4
 8000540:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000542:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8000546:	60a5      	str	r5, [r4, #8]
 8000548:	4b5d      	ldr	r3, [pc, #372]	@ (80006c0 <main+0x198>)
 800054a:	60e3      	str	r3, [r4, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054c:	f000 fba8 	bl	8000ca0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000550:	f000 f8ce 	bl	80006f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000554:	f000 f9b2 	bl	80008bc <MX_GPIO_Init>
  MX_ADC1_Init();
 8000558:	f000 f934 	bl	80007c4 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 800055c:	f000 f984 	bl	8000868 <MX_USART2_UART_Init>
  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  xQueue = xQueueCreate(5, sizeof(int));
 8000560:	2200      	movs	r2, #0
 8000562:	2104      	movs	r1, #4
 8000564:	2005      	movs	r0, #5
 8000566:	f002 fcbf 	bl	8002ee8 <xQueueGenericCreate>
 800056a:	4603      	mov	r3, r0
 800056c:	4a55      	ldr	r2, [pc, #340]	@ (80006c4 <main+0x19c>)
 800056e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8000570:	4b55      	ldr	r3, [pc, #340]	@ (80006c8 <main+0x1a0>)
 8000572:	f107 0420 	add.w	r4, r7, #32
 8000576:	461d      	mov	r5, r3
 8000578:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800057a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800057c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000580:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000584:	f107 0320 	add.w	r3, r7, #32
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f002 fb2d 	bl	8002bea <osThreadCreate>
 8000590:	4603      	mov	r3, r0
 8000592:	4a4e      	ldr	r2, [pc, #312]	@ (80006cc <main+0x1a4>)
 8000594:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  uint16_t led1 = LED1_PIN;
 8000596:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800059a:	83fb      	strh	r3, [r7, #30]
      uint32_t rate1 = 500;  // LED1 toggles every 500ms
 800059c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80005a0:	61bb      	str	r3, [r7, #24]
      xTaskCreate(vLedTask, "LED1 Task", 128, &led1, 2, NULL);
 80005a2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80005a6:	f043 0301 	orr.w	r3, r3, #1
 80005aa:	4618      	mov	r0, r3
 80005ac:	f107 031e 	add.w	r3, r7, #30
 80005b0:	2200      	movs	r2, #0
 80005b2:	9201      	str	r2, [sp, #4]
 80005b4:	2202      	movs	r2, #2
 80005b6:	9200      	str	r2, [sp, #0]
 80005b8:	2280      	movs	r2, #128	@ 0x80
 80005ba:	4945      	ldr	r1, [pc, #276]	@ (80006d0 <main+0x1a8>)
 80005bc:	f002 fd4e 	bl	800305c <xTaskCreate>
      xTaskCreate(vLedTask, "Rate1 Task", 128, &rate1, 2, NULL);
 80005c0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80005c4:	f043 0301 	orr.w	r3, r3, #1
 80005c8:	4618      	mov	r0, r3
 80005ca:	f107 0318 	add.w	r3, r7, #24
 80005ce:	2200      	movs	r2, #0
 80005d0:	9201      	str	r2, [sp, #4]
 80005d2:	2202      	movs	r2, #2
 80005d4:	9200      	str	r2, [sp, #0]
 80005d6:	2280      	movs	r2, #128	@ 0x80
 80005d8:	493e      	ldr	r1, [pc, #248]	@ (80006d4 <main+0x1ac>)
 80005da:	f002 fd3f 	bl	800305c <xTaskCreate>

      uint16_t led2 = LED2_PIN;
 80005de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005e2:	82fb      	strh	r3, [r7, #22]
      uint32_t rate2 = 1000; // LED2 toggles every 1000ms
 80005e4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005e8:	613b      	str	r3, [r7, #16]
      xTaskCreate(vLedTask, "LED2 Task", 128, &led2, 2, NULL);
 80005ea:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80005ee:	f043 0301 	orr.w	r3, r3, #1
 80005f2:	4618      	mov	r0, r3
 80005f4:	f107 0316 	add.w	r3, r7, #22
 80005f8:	2200      	movs	r2, #0
 80005fa:	9201      	str	r2, [sp, #4]
 80005fc:	2202      	movs	r2, #2
 80005fe:	9200      	str	r2, [sp, #0]
 8000600:	2280      	movs	r2, #128	@ 0x80
 8000602:	4935      	ldr	r1, [pc, #212]	@ (80006d8 <main+0x1b0>)
 8000604:	f002 fd2a 	bl	800305c <xTaskCreate>
      xTaskCreate(vLedTask, "Rate2 Task", 128, &rate2, 2, NULL);
 8000608:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800060c:	f043 0301 	orr.w	r3, r3, #1
 8000610:	4618      	mov	r0, r3
 8000612:	f107 0310 	add.w	r3, r7, #16
 8000616:	2200      	movs	r2, #0
 8000618:	9201      	str	r2, [sp, #4]
 800061a:	2202      	movs	r2, #2
 800061c:	9200      	str	r2, [sp, #0]
 800061e:	2280      	movs	r2, #128	@ 0x80
 8000620:	492e      	ldr	r1, [pc, #184]	@ (80006dc <main+0x1b4>)
 8000622:	f002 fd1b 	bl	800305c <xTaskCreate>

      uint16_t led3 = LED3_PIN;
 8000626:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800062a:	81fb      	strh	r3, [r7, #14]
      uint32_t rate3 = 1500; // LED3 toggles every 1500ms
 800062c:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000630:	60bb      	str	r3, [r7, #8]
      xTaskCreate(vLedTask, "LED3 Task", 128, &led3, 2, NULL);
 8000632:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000636:	f043 0301 	orr.w	r3, r3, #1
 800063a:	4618      	mov	r0, r3
 800063c:	f107 030e 	add.w	r3, r7, #14
 8000640:	2200      	movs	r2, #0
 8000642:	9201      	str	r2, [sp, #4]
 8000644:	2202      	movs	r2, #2
 8000646:	9200      	str	r2, [sp, #0]
 8000648:	2280      	movs	r2, #128	@ 0x80
 800064a:	4925      	ldr	r1, [pc, #148]	@ (80006e0 <main+0x1b8>)
 800064c:	f002 fd06 	bl	800305c <xTaskCreate>
      xTaskCreate(vLedTask, "Rate3 Task", 128, &rate3, 2, NULL);
 8000650:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	4618      	mov	r0, r3
 800065a:	f107 0308 	add.w	r3, r7, #8
 800065e:	2200      	movs	r2, #0
 8000660:	9201      	str	r2, [sp, #4]
 8000662:	2202      	movs	r2, #2
 8000664:	9200      	str	r2, [sp, #0]
 8000666:	2280      	movs	r2, #128	@ 0x80
 8000668:	491e      	ldr	r1, [pc, #120]	@ (80006e4 <main+0x1bc>)
 800066a:	f002 fcf7 	bl	800305c <xTaskCreate>

      uint16_t led4 = LED4_PIN;
 800066e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000672:	80fb      	strh	r3, [r7, #6]
      uint32_t rate4 = 2000; // LED4 toggles every 2000ms
 8000674:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000678:	603b      	str	r3, [r7, #0]
      xTaskCreate(vLedTask, "LED4 Task", 128, &led4, 2, NULL);
 800067a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800067e:	f043 0301 	orr.w	r3, r3, #1
 8000682:	4618      	mov	r0, r3
 8000684:	1dbb      	adds	r3, r7, #6
 8000686:	2200      	movs	r2, #0
 8000688:	9201      	str	r2, [sp, #4]
 800068a:	2202      	movs	r2, #2
 800068c:	9200      	str	r2, [sp, #0]
 800068e:	2280      	movs	r2, #128	@ 0x80
 8000690:	4915      	ldr	r1, [pc, #84]	@ (80006e8 <main+0x1c0>)
 8000692:	f002 fce3 	bl	800305c <xTaskCreate>
      xTaskCreate(vLedTask, "Rate4 Task", 128, &rate4, 2, NULL);
 8000696:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800069a:	f043 0301 	orr.w	r3, r3, #1
 800069e:	4618      	mov	r0, r3
 80006a0:	463b      	mov	r3, r7
 80006a2:	2200      	movs	r2, #0
 80006a4:	9201      	str	r2, [sp, #4]
 80006a6:	2202      	movs	r2, #2
 80006a8:	9200      	str	r2, [sp, #0]
 80006aa:	2280      	movs	r2, #128	@ 0x80
 80006ac:	490f      	ldr	r1, [pc, #60]	@ (80006ec <main+0x1c4>)
 80006ae:	f002 fcd5 	bl	800305c <xTaskCreate>

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006b2:	f002 fa93 	bl	8002bdc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006b6:	bf00      	nop
 80006b8:	e7fd      	b.n	80006b6 <main+0x18e>
 80006ba:	bf00      	nop
 80006bc:	080044e0 	.word	0x080044e0
 80006c0:	080004f5 	.word	0x080004f5
 80006c4:	200003b0 	.word	0x200003b0
 80006c8:	0800455c 	.word	0x0800455c
 80006cc:	200003ac 	.word	0x200003ac
 80006d0:	080044f0 	.word	0x080044f0
 80006d4:	080044fc 	.word	0x080044fc
 80006d8:	08004508 	.word	0x08004508
 80006dc:	08004514 	.word	0x08004514
 80006e0:	08004520 	.word	0x08004520
 80006e4:	0800452c 	.word	0x0800452c
 80006e8:	08004538 	.word	0x08004538
 80006ec:	08004544 	.word	0x08004544

080006f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b094      	sub	sp, #80	@ 0x50
 80006f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f6:	f107 0320 	add.w	r3, r7, #32
 80006fa:	2230      	movs	r2, #48	@ 0x30
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f003 fe08 	bl	8004314 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000704:	f107 030c 	add.w	r3, r7, #12
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
 8000712:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000714:	2300      	movs	r3, #0
 8000716:	60bb      	str	r3, [r7, #8]
 8000718:	4b28      	ldr	r3, [pc, #160]	@ (80007bc <SystemClock_Config+0xcc>)
 800071a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800071c:	4a27      	ldr	r2, [pc, #156]	@ (80007bc <SystemClock_Config+0xcc>)
 800071e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000722:	6413      	str	r3, [r2, #64]	@ 0x40
 8000724:	4b25      	ldr	r3, [pc, #148]	@ (80007bc <SystemClock_Config+0xcc>)
 8000726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000728:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800072c:	60bb      	str	r3, [r7, #8]
 800072e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000730:	2300      	movs	r3, #0
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	4b22      	ldr	r3, [pc, #136]	@ (80007c0 <SystemClock_Config+0xd0>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a21      	ldr	r2, [pc, #132]	@ (80007c0 <SystemClock_Config+0xd0>)
 800073a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800073e:	6013      	str	r3, [r2, #0]
 8000740:	4b1f      	ldr	r3, [pc, #124]	@ (80007c0 <SystemClock_Config+0xd0>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800074c:	2302      	movs	r3, #2
 800074e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000750:	2301      	movs	r3, #1
 8000752:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000754:	2310      	movs	r3, #16
 8000756:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000758:	2302      	movs	r3, #2
 800075a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800075c:	2300      	movs	r3, #0
 800075e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000760:	2308      	movs	r3, #8
 8000762:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000764:	2332      	movs	r3, #50	@ 0x32
 8000766:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000768:	2302      	movs	r3, #2
 800076a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800076c:	2307      	movs	r3, #7
 800076e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000770:	f107 0320 	add.w	r3, r7, #32
 8000774:	4618      	mov	r0, r3
 8000776:	f000 ffe9 	bl	800174c <HAL_RCC_OscConfig>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000780:	f000 f8fa 	bl	8000978 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000784:	230f      	movs	r3, #15
 8000786:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000788:	2302      	movs	r3, #2
 800078a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000790:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000794:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000796:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800079a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800079c:	f107 030c 	add.w	r3, r7, #12
 80007a0:	2101      	movs	r1, #1
 80007a2:	4618      	mov	r0, r3
 80007a4:	f001 fa4a 	bl	8001c3c <HAL_RCC_ClockConfig>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007ae:	f000 f8e3 	bl	8000978 <Error_Handler>
  }
}
 80007b2:	bf00      	nop
 80007b4:	3750      	adds	r7, #80	@ 0x50
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40007000 	.word	0x40007000

080007c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ca:	463b      	mov	r3, r7
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007d6:	4b21      	ldr	r3, [pc, #132]	@ (800085c <MX_ADC1_Init+0x98>)
 80007d8:	4a21      	ldr	r2, [pc, #132]	@ (8000860 <MX_ADC1_Init+0x9c>)
 80007da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80007dc:	4b1f      	ldr	r3, [pc, #124]	@ (800085c <MX_ADC1_Init+0x98>)
 80007de:	2200      	movs	r2, #0
 80007e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007e2:	4b1e      	ldr	r3, [pc, #120]	@ (800085c <MX_ADC1_Init+0x98>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80007e8:	4b1c      	ldr	r3, [pc, #112]	@ (800085c <MX_ADC1_Init+0x98>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007ee:	4b1b      	ldr	r3, [pc, #108]	@ (800085c <MX_ADC1_Init+0x98>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007f4:	4b19      	ldr	r3, [pc, #100]	@ (800085c <MX_ADC1_Init+0x98>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007fc:	4b17      	ldr	r3, [pc, #92]	@ (800085c <MX_ADC1_Init+0x98>)
 80007fe:	2200      	movs	r2, #0
 8000800:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000802:	4b16      	ldr	r3, [pc, #88]	@ (800085c <MX_ADC1_Init+0x98>)
 8000804:	4a17      	ldr	r2, [pc, #92]	@ (8000864 <MX_ADC1_Init+0xa0>)
 8000806:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000808:	4b14      	ldr	r3, [pc, #80]	@ (800085c <MX_ADC1_Init+0x98>)
 800080a:	2200      	movs	r2, #0
 800080c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800080e:	4b13      	ldr	r3, [pc, #76]	@ (800085c <MX_ADC1_Init+0x98>)
 8000810:	2201      	movs	r2, #1
 8000812:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000814:	4b11      	ldr	r3, [pc, #68]	@ (800085c <MX_ADC1_Init+0x98>)
 8000816:	2200      	movs	r2, #0
 8000818:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800081c:	4b0f      	ldr	r3, [pc, #60]	@ (800085c <MX_ADC1_Init+0x98>)
 800081e:	2201      	movs	r2, #1
 8000820:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000822:	480e      	ldr	r0, [pc, #56]	@ (800085c <MX_ADC1_Init+0x98>)
 8000824:	f000 fa7e 	bl	8000d24 <HAL_ADC_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800082e:	f000 f8a3 	bl	8000978 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000832:	2300      	movs	r3, #0
 8000834:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000836:	2301      	movs	r3, #1
 8000838:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800083a:	2300      	movs	r3, #0
 800083c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800083e:	463b      	mov	r3, r7
 8000840:	4619      	mov	r1, r3
 8000842:	4806      	ldr	r0, [pc, #24]	@ (800085c <MX_ADC1_Init+0x98>)
 8000844:	f000 fab2 	bl	8000dac <HAL_ADC_ConfigChannel>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800084e:	f000 f893 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000852:	bf00      	nop
 8000854:	3710      	adds	r7, #16
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	2000031c 	.word	0x2000031c
 8000860:	40012000 	.word	0x40012000
 8000864:	0f000001 	.word	0x0f000001

08000868 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800086c:	4b11      	ldr	r3, [pc, #68]	@ (80008b4 <MX_USART2_UART_Init+0x4c>)
 800086e:	4a12      	ldr	r2, [pc, #72]	@ (80008b8 <MX_USART2_UART_Init+0x50>)
 8000870:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000872:	4b10      	ldr	r3, [pc, #64]	@ (80008b4 <MX_USART2_UART_Init+0x4c>)
 8000874:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000878:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800087a:	4b0e      	ldr	r3, [pc, #56]	@ (80008b4 <MX_USART2_UART_Init+0x4c>)
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000880:	4b0c      	ldr	r3, [pc, #48]	@ (80008b4 <MX_USART2_UART_Init+0x4c>)
 8000882:	2200      	movs	r2, #0
 8000884:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000886:	4b0b      	ldr	r3, [pc, #44]	@ (80008b4 <MX_USART2_UART_Init+0x4c>)
 8000888:	2200      	movs	r2, #0
 800088a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800088c:	4b09      	ldr	r3, [pc, #36]	@ (80008b4 <MX_USART2_UART_Init+0x4c>)
 800088e:	220c      	movs	r2, #12
 8000890:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000892:	4b08      	ldr	r3, [pc, #32]	@ (80008b4 <MX_USART2_UART_Init+0x4c>)
 8000894:	2200      	movs	r2, #0
 8000896:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000898:	4b06      	ldr	r3, [pc, #24]	@ (80008b4 <MX_USART2_UART_Init+0x4c>)
 800089a:	2200      	movs	r2, #0
 800089c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800089e:	4805      	ldr	r0, [pc, #20]	@ (80008b4 <MX_USART2_UART_Init+0x4c>)
 80008a0:	f001 fec0 	bl	8002624 <HAL_UART_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008aa:	f000 f865 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000364 	.word	0x20000364
 80008b8:	40004400 	.word	0x40004400

080008bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b088      	sub	sp, #32
 80008c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c2:	f107 030c 	add.w	r3, r7, #12
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
 80008d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	60bb      	str	r3, [r7, #8]
 80008d6:	4b19      	ldr	r3, [pc, #100]	@ (800093c <MX_GPIO_Init+0x80>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	4a18      	ldr	r2, [pc, #96]	@ (800093c <MX_GPIO_Init+0x80>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e2:	4b16      	ldr	r3, [pc, #88]	@ (800093c <MX_GPIO_Init+0x80>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	60bb      	str	r3, [r7, #8]
 80008ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	607b      	str	r3, [r7, #4]
 80008f2:	4b12      	ldr	r3, [pc, #72]	@ (800093c <MX_GPIO_Init+0x80>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	4a11      	ldr	r2, [pc, #68]	@ (800093c <MX_GPIO_Init+0x80>)
 80008f8:	f043 0308 	orr.w	r3, r3, #8
 80008fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fe:	4b0f      	ldr	r3, [pc, #60]	@ (800093c <MX_GPIO_Init+0x80>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	f003 0308 	and.w	r3, r3, #8
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800090a:	2200      	movs	r2, #0
 800090c:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000910:	480b      	ldr	r0, [pc, #44]	@ (8000940 <MX_GPIO_Init+0x84>)
 8000912:	f000 fee7 	bl	80016e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000916:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800091a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091c:	2301      	movs	r3, #1
 800091e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000924:	2300      	movs	r3, #0
 8000926:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000928:	f107 030c 	add.w	r3, r7, #12
 800092c:	4619      	mov	r1, r3
 800092e:	4804      	ldr	r0, [pc, #16]	@ (8000940 <MX_GPIO_Init+0x84>)
 8000930:	f000 fd3c 	bl	80013ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000934:	bf00      	nop
 8000936:	3720      	adds	r7, #32
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40023800 	.word	0x40023800
 8000940:	40020c00 	.word	0x40020c00

08000944 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800094c:	2001      	movs	r0, #1
 800094e:	f002 f998 	bl	8002c82 <osDelay>
 8000952:	e7fb      	b.n	800094c <StartDefaultTask+0x8>

08000954 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a04      	ldr	r2, [pc, #16]	@ (8000974 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d101      	bne.n	800096a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000966:	f000 f9bd 	bl	8000ce4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800096a:	bf00      	nop
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40010000 	.word	0x40010000

08000978 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800097c:	b672      	cpsid	i
}
 800097e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000980:	bf00      	nop
 8000982:	e7fd      	b.n	8000980 <Error_Handler+0x8>

08000984 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	607b      	str	r3, [r7, #4]
 800098e:	4b12      	ldr	r3, [pc, #72]	@ (80009d8 <HAL_MspInit+0x54>)
 8000990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000992:	4a11      	ldr	r2, [pc, #68]	@ (80009d8 <HAL_MspInit+0x54>)
 8000994:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000998:	6453      	str	r3, [r2, #68]	@ 0x44
 800099a:	4b0f      	ldr	r3, [pc, #60]	@ (80009d8 <HAL_MspInit+0x54>)
 800099c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800099e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	603b      	str	r3, [r7, #0]
 80009aa:	4b0b      	ldr	r3, [pc, #44]	@ (80009d8 <HAL_MspInit+0x54>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ae:	4a0a      	ldr	r2, [pc, #40]	@ (80009d8 <HAL_MspInit+0x54>)
 80009b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80009b6:	4b08      	ldr	r3, [pc, #32]	@ (80009d8 <HAL_MspInit+0x54>)
 80009b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009c2:	2200      	movs	r2, #0
 80009c4:	210f      	movs	r1, #15
 80009c6:	f06f 0001 	mvn.w	r0, #1
 80009ca:	f000 fcc5 	bl	8001358 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40023800 	.word	0x40023800

080009dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08a      	sub	sp, #40	@ 0x28
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e4:	f107 0314 	add.w	r3, r7, #20
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
 80009f2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a17      	ldr	r2, [pc, #92]	@ (8000a58 <HAL_ADC_MspInit+0x7c>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d127      	bne.n	8000a4e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	613b      	str	r3, [r7, #16]
 8000a02:	4b16      	ldr	r3, [pc, #88]	@ (8000a5c <HAL_ADC_MspInit+0x80>)
 8000a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a06:	4a15      	ldr	r2, [pc, #84]	@ (8000a5c <HAL_ADC_MspInit+0x80>)
 8000a08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a0e:	4b13      	ldr	r3, [pc, #76]	@ (8000a5c <HAL_ADC_MspInit+0x80>)
 8000a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000a16:	613b      	str	r3, [r7, #16]
 8000a18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a5c <HAL_ADC_MspInit+0x80>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a22:	4a0e      	ldr	r2, [pc, #56]	@ (8000a5c <HAL_ADC_MspInit+0x80>)
 8000a24:	f043 0301 	orr.w	r3, r3, #1
 8000a28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a5c <HAL_ADC_MspInit+0x80>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	f003 0301 	and.w	r3, r3, #1
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a36:	2301      	movs	r3, #1
 8000a38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a3a:	2303      	movs	r3, #3
 8000a3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a42:	f107 0314 	add.w	r3, r7, #20
 8000a46:	4619      	mov	r1, r3
 8000a48:	4805      	ldr	r0, [pc, #20]	@ (8000a60 <HAL_ADC_MspInit+0x84>)
 8000a4a:	f000 fcaf 	bl	80013ac <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000a4e:	bf00      	nop
 8000a50:	3728      	adds	r7, #40	@ 0x28
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40012000 	.word	0x40012000
 8000a5c:	40023800 	.word	0x40023800
 8000a60:	40020000 	.word	0x40020000

08000a64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08a      	sub	sp, #40	@ 0x28
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]
 8000a7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a19      	ldr	r2, [pc, #100]	@ (8000ae8 <HAL_UART_MspInit+0x84>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d12b      	bne.n	8000ade <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	613b      	str	r3, [r7, #16]
 8000a8a:	4b18      	ldr	r3, [pc, #96]	@ (8000aec <HAL_UART_MspInit+0x88>)
 8000a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a8e:	4a17      	ldr	r2, [pc, #92]	@ (8000aec <HAL_UART_MspInit+0x88>)
 8000a90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a94:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a96:	4b15      	ldr	r3, [pc, #84]	@ (8000aec <HAL_UART_MspInit+0x88>)
 8000a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a9e:	613b      	str	r3, [r7, #16]
 8000aa0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60fb      	str	r3, [r7, #12]
 8000aa6:	4b11      	ldr	r3, [pc, #68]	@ (8000aec <HAL_UART_MspInit+0x88>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aaa:	4a10      	ldr	r2, [pc, #64]	@ (8000aec <HAL_UART_MspInit+0x88>)
 8000aac:	f043 0301 	orr.w	r3, r3, #1
 8000ab0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab2:	4b0e      	ldr	r3, [pc, #56]	@ (8000aec <HAL_UART_MspInit+0x88>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000abe:	230c      	movs	r3, #12
 8000ac0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aca:	2303      	movs	r3, #3
 8000acc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ace:	2307      	movs	r3, #7
 8000ad0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad2:	f107 0314 	add.w	r3, r7, #20
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4805      	ldr	r0, [pc, #20]	@ (8000af0 <HAL_UART_MspInit+0x8c>)
 8000ada:	f000 fc67 	bl	80013ac <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000ade:	bf00      	nop
 8000ae0:	3728      	adds	r7, #40	@ 0x28
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40004400 	.word	0x40004400
 8000aec:	40023800 	.word	0x40023800
 8000af0:	40020000 	.word	0x40020000

08000af4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08c      	sub	sp, #48	@ 0x30
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000afc:	2300      	movs	r3, #0
 8000afe:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000b00:	2300      	movs	r3, #0
 8000b02:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b04:	2300      	movs	r3, #0
 8000b06:	60bb      	str	r3, [r7, #8]
 8000b08:	4b2f      	ldr	r3, [pc, #188]	@ (8000bc8 <HAL_InitTick+0xd4>)
 8000b0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b0c:	4a2e      	ldr	r2, [pc, #184]	@ (8000bc8 <HAL_InitTick+0xd4>)
 8000b0e:	f043 0301 	orr.w	r3, r3, #1
 8000b12:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b14:	4b2c      	ldr	r3, [pc, #176]	@ (8000bc8 <HAL_InitTick+0xd4>)
 8000b16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b18:	f003 0301 	and.w	r3, r3, #1
 8000b1c:	60bb      	str	r3, [r7, #8]
 8000b1e:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b20:	f107 020c 	add.w	r2, r7, #12
 8000b24:	f107 0310 	add.w	r3, r7, #16
 8000b28:	4611      	mov	r1, r2
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f001 faa6 	bl	800207c <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000b30:	f001 fa90 	bl	8002054 <HAL_RCC_GetPCLK2Freq>
 8000b34:	4603      	mov	r3, r0
 8000b36:	005b      	lsls	r3, r3, #1
 8000b38:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b3c:	4a23      	ldr	r2, [pc, #140]	@ (8000bcc <HAL_InitTick+0xd8>)
 8000b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b42:	0c9b      	lsrs	r3, r3, #18
 8000b44:	3b01      	subs	r3, #1
 8000b46:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b48:	4b21      	ldr	r3, [pc, #132]	@ (8000bd0 <HAL_InitTick+0xdc>)
 8000b4a:	4a22      	ldr	r2, [pc, #136]	@ (8000bd4 <HAL_InitTick+0xe0>)
 8000b4c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000b4e:	4b20      	ldr	r3, [pc, #128]	@ (8000bd0 <HAL_InitTick+0xdc>)
 8000b50:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b54:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b56:	4a1e      	ldr	r2, [pc, #120]	@ (8000bd0 <HAL_InitTick+0xdc>)
 8000b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b5a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b5c:	4b1c      	ldr	r3, [pc, #112]	@ (8000bd0 <HAL_InitTick+0xdc>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b62:	4b1b      	ldr	r3, [pc, #108]	@ (8000bd0 <HAL_InitTick+0xdc>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b68:	4b19      	ldr	r3, [pc, #100]	@ (8000bd0 <HAL_InitTick+0xdc>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000b6e:	4818      	ldr	r0, [pc, #96]	@ (8000bd0 <HAL_InitTick+0xdc>)
 8000b70:	f001 fab6 	bl	80020e0 <HAL_TIM_Base_Init>
 8000b74:	4603      	mov	r3, r0
 8000b76:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000b7a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d11b      	bne.n	8000bba <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000b82:	4813      	ldr	r0, [pc, #76]	@ (8000bd0 <HAL_InitTick+0xdc>)
 8000b84:	f001 fb06 	bl	8002194 <HAL_TIM_Base_Start_IT>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000b8e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d111      	bne.n	8000bba <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000b96:	2019      	movs	r0, #25
 8000b98:	f000 fbfa 	bl	8001390 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2b0f      	cmp	r3, #15
 8000ba0:	d808      	bhi.n	8000bb4 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	6879      	ldr	r1, [r7, #4]
 8000ba6:	2019      	movs	r0, #25
 8000ba8:	f000 fbd6 	bl	8001358 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bac:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd8 <HAL_InitTick+0xe4>)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6013      	str	r3, [r2, #0]
 8000bb2:	e002      	b.n	8000bba <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000bba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3730      	adds	r7, #48	@ 0x30
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	431bde83 	.word	0x431bde83
 8000bd0:	200003b4 	.word	0x200003b4
 8000bd4:	40010000 	.word	0x40010000
 8000bd8:	20000004 	.word	0x20000004

08000bdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000be0:	bf00      	nop
 8000be2:	e7fd      	b.n	8000be0 <NMI_Handler+0x4>

08000be4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be8:	bf00      	nop
 8000bea:	e7fd      	b.n	8000be8 <HardFault_Handler+0x4>

08000bec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf0:	bf00      	nop
 8000bf2:	e7fd      	b.n	8000bf0 <MemManage_Handler+0x4>

08000bf4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf8:	bf00      	nop
 8000bfa:	e7fd      	b.n	8000bf8 <BusFault_Handler+0x4>

08000bfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c00:	bf00      	nop
 8000c02:	e7fd      	b.n	8000c00 <UsageFault_Handler+0x4>

08000c04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
	...

08000c14 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c18:	4802      	ldr	r0, [pc, #8]	@ (8000c24 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000c1a:	f001 fb2b 	bl	8002274 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	200003b4 	.word	0x200003b4

08000c28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c2c:	4b06      	ldr	r3, [pc, #24]	@ (8000c48 <SystemInit+0x20>)
 8000c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c32:	4a05      	ldr	r2, [pc, #20]	@ (8000c48 <SystemInit+0x20>)
 8000c34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c84 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c50:	f7ff ffea 	bl	8000c28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c54:	480c      	ldr	r0, [pc, #48]	@ (8000c88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c56:	490d      	ldr	r1, [pc, #52]	@ (8000c8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c58:	4a0d      	ldr	r2, [pc, #52]	@ (8000c90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c5c:	e002      	b.n	8000c64 <LoopCopyDataInit>

08000c5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c62:	3304      	adds	r3, #4

08000c64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c68:	d3f9      	bcc.n	8000c5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c6c:	4c0a      	ldr	r4, [pc, #40]	@ (8000c98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c70:	e001      	b.n	8000c76 <LoopFillZerobss>

08000c72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c74:	3204      	adds	r2, #4

08000c76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c78:	d3fb      	bcc.n	8000c72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c7a:	f003 fba9 	bl	80043d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c7e:	f7ff fc53 	bl	8000528 <main>
  bx  lr    
 8000c82:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c8c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000c90:	080045a8 	.word	0x080045a8
  ldr r2, =_sbss
 8000c94:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000c98:	20004294 	.word	0x20004294

08000c9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c9c:	e7fe      	b.n	8000c9c <ADC_IRQHandler>
	...

08000ca0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ca4:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce0 <HAL_Init+0x40>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a0d      	ldr	r2, [pc, #52]	@ (8000ce0 <HAL_Init+0x40>)
 8000caa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce0 <HAL_Init+0x40>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce0 <HAL_Init+0x40>)
 8000cb6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cbc:	4b08      	ldr	r3, [pc, #32]	@ (8000ce0 <HAL_Init+0x40>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a07      	ldr	r2, [pc, #28]	@ (8000ce0 <HAL_Init+0x40>)
 8000cc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc8:	2003      	movs	r0, #3
 8000cca:	f000 fb3a 	bl	8001342 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cce:	200f      	movs	r0, #15
 8000cd0:	f7ff ff10 	bl	8000af4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cd4:	f7ff fe56 	bl	8000984 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40023c00 	.word	0x40023c00

08000ce4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ce8:	4b06      	ldr	r3, [pc, #24]	@ (8000d04 <HAL_IncTick+0x20>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	461a      	mov	r2, r3
 8000cee:	4b06      	ldr	r3, [pc, #24]	@ (8000d08 <HAL_IncTick+0x24>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	4a04      	ldr	r2, [pc, #16]	@ (8000d08 <HAL_IncTick+0x24>)
 8000cf6:	6013      	str	r3, [r2, #0]
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	20000008 	.word	0x20000008
 8000d08:	200003fc 	.word	0x200003fc

08000d0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d10:	4b03      	ldr	r3, [pc, #12]	@ (8000d20 <HAL_GetTick+0x14>)
 8000d12:	681b      	ldr	r3, [r3, #0]
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	200003fc 	.word	0x200003fc

08000d24 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d101      	bne.n	8000d3a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
 8000d38:	e033      	b.n	8000da2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d109      	bne.n	8000d56 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	f7ff fe4a 	bl	80009dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2200      	movs	r2, #0
 8000d52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d5a:	f003 0310 	and.w	r3, r3, #16
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d118      	bne.n	8000d94 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d66:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000d6a:	f023 0302 	bic.w	r3, r3, #2
 8000d6e:	f043 0202 	orr.w	r2, r3, #2
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f000 f93a 	bl	8000ff0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2200      	movs	r2, #0
 8000d80:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d86:	f023 0303 	bic.w	r3, r3, #3
 8000d8a:	f043 0201 	orr.w	r2, r3, #1
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	641a      	str	r2, [r3, #64]	@ 0x40
 8000d92:	e001      	b.n	8000d98 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000d94:	2301      	movs	r3, #1
 8000d96:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3710      	adds	r7, #16
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
	...

08000dac <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000db6:	2300      	movs	r3, #0
 8000db8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d101      	bne.n	8000dc8 <HAL_ADC_ConfigChannel+0x1c>
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	e105      	b.n	8000fd4 <HAL_ADC_ConfigChannel+0x228>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2201      	movs	r2, #1
 8000dcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	2b09      	cmp	r3, #9
 8000dd6:	d925      	bls.n	8000e24 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	68d9      	ldr	r1, [r3, #12]
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	b29b      	uxth	r3, r3
 8000de4:	461a      	mov	r2, r3
 8000de6:	4613      	mov	r3, r2
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	4413      	add	r3, r2
 8000dec:	3b1e      	subs	r3, #30
 8000dee:	2207      	movs	r2, #7
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	43da      	mvns	r2, r3
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	400a      	ands	r2, r1
 8000dfc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	68d9      	ldr	r1, [r3, #12]
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	689a      	ldr	r2, [r3, #8]
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	4618      	mov	r0, r3
 8000e10:	4603      	mov	r3, r0
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	4403      	add	r3, r0
 8000e16:	3b1e      	subs	r3, #30
 8000e18:	409a      	lsls	r2, r3
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	430a      	orrs	r2, r1
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	e022      	b.n	8000e6a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	6919      	ldr	r1, [r3, #16]
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	461a      	mov	r2, r3
 8000e32:	4613      	mov	r3, r2
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	4413      	add	r3, r2
 8000e38:	2207      	movs	r2, #7
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	43da      	mvns	r2, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	400a      	ands	r2, r1
 8000e46:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	6919      	ldr	r1, [r3, #16]
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	689a      	ldr	r2, [r3, #8]
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	b29b      	uxth	r3, r3
 8000e58:	4618      	mov	r0, r3
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	4403      	add	r3, r0
 8000e60:	409a      	lsls	r2, r3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	430a      	orrs	r2, r1
 8000e68:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	2b06      	cmp	r3, #6
 8000e70:	d824      	bhi.n	8000ebc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685a      	ldr	r2, [r3, #4]
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	4413      	add	r3, r2
 8000e82:	3b05      	subs	r3, #5
 8000e84:	221f      	movs	r2, #31
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	43da      	mvns	r2, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	400a      	ands	r2, r1
 8000e92:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	b29b      	uxth	r3, r3
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685a      	ldr	r2, [r3, #4]
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	4413      	add	r3, r2
 8000eac:	3b05      	subs	r3, #5
 8000eae:	fa00 f203 	lsl.w	r2, r0, r3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	430a      	orrs	r2, r1
 8000eb8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000eba:	e04c      	b.n	8000f56 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	2b0c      	cmp	r3, #12
 8000ec2:	d824      	bhi.n	8000f0e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685a      	ldr	r2, [r3, #4]
 8000ece:	4613      	mov	r3, r2
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	4413      	add	r3, r2
 8000ed4:	3b23      	subs	r3, #35	@ 0x23
 8000ed6:	221f      	movs	r2, #31
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	43da      	mvns	r2, r3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	400a      	ands	r2, r1
 8000ee4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	b29b      	uxth	r3, r3
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685a      	ldr	r2, [r3, #4]
 8000ef8:	4613      	mov	r3, r2
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	4413      	add	r3, r2
 8000efe:	3b23      	subs	r3, #35	@ 0x23
 8000f00:	fa00 f203 	lsl.w	r2, r0, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	430a      	orrs	r2, r1
 8000f0a:	631a      	str	r2, [r3, #48]	@ 0x30
 8000f0c:	e023      	b.n	8000f56 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685a      	ldr	r2, [r3, #4]
 8000f18:	4613      	mov	r3, r2
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	4413      	add	r3, r2
 8000f1e:	3b41      	subs	r3, #65	@ 0x41
 8000f20:	221f      	movs	r2, #31
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	43da      	mvns	r2, r3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	400a      	ands	r2, r1
 8000f2e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685a      	ldr	r2, [r3, #4]
 8000f42:	4613      	mov	r3, r2
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	4413      	add	r3, r2
 8000f48:	3b41      	subs	r3, #65	@ 0x41
 8000f4a:	fa00 f203 	lsl.w	r2, r0, r3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	430a      	orrs	r2, r1
 8000f54:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000f56:	4b22      	ldr	r3, [pc, #136]	@ (8000fe0 <HAL_ADC_ConfigChannel+0x234>)
 8000f58:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a21      	ldr	r2, [pc, #132]	@ (8000fe4 <HAL_ADC_ConfigChannel+0x238>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d109      	bne.n	8000f78 <HAL_ADC_ConfigChannel+0x1cc>
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2b12      	cmp	r3, #18
 8000f6a:	d105      	bne.n	8000f78 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a19      	ldr	r2, [pc, #100]	@ (8000fe4 <HAL_ADC_ConfigChannel+0x238>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d123      	bne.n	8000fca <HAL_ADC_ConfigChannel+0x21e>
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2b10      	cmp	r3, #16
 8000f88:	d003      	beq.n	8000f92 <HAL_ADC_ConfigChannel+0x1e6>
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	2b11      	cmp	r3, #17
 8000f90:	d11b      	bne.n	8000fca <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2b10      	cmp	r3, #16
 8000fa4:	d111      	bne.n	8000fca <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000fa6:	4b10      	ldr	r3, [pc, #64]	@ (8000fe8 <HAL_ADC_ConfigChannel+0x23c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a10      	ldr	r2, [pc, #64]	@ (8000fec <HAL_ADC_ConfigChannel+0x240>)
 8000fac:	fba2 2303 	umull	r2, r3, r2, r3
 8000fb0:	0c9a      	lsrs	r2, r3, #18
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	4413      	add	r3, r2
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8000fbc:	e002      	b.n	8000fc4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	3b01      	subs	r3, #1
 8000fc2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d1f9      	bne.n	8000fbe <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8000fd2:	2300      	movs	r3, #0
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3714      	adds	r7, #20
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	40012300 	.word	0x40012300
 8000fe4:	40012000 	.word	0x40012000
 8000fe8:	20000000 	.word	0x20000000
 8000fec:	431bde83 	.word	0x431bde83

08000ff0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000ff8:	4b79      	ldr	r3, [pc, #484]	@ (80011e0 <ADC_Init+0x1f0>)
 8000ffa:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	685a      	ldr	r2, [r3, #4]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	431a      	orrs	r2, r3
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	685a      	ldr	r2, [r3, #4]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001024:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	6859      	ldr	r1, [r3, #4]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	691b      	ldr	r3, [r3, #16]
 8001030:	021a      	lsls	r2, r3, #8
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	430a      	orrs	r2, r1
 8001038:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	685a      	ldr	r2, [r3, #4]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001048:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	6859      	ldr	r1, [r3, #4]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	689a      	ldr	r2, [r3, #8]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	430a      	orrs	r2, r1
 800105a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	689a      	ldr	r2, [r3, #8]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800106a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	6899      	ldr	r1, [r3, #8]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	68da      	ldr	r2, [r3, #12]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	430a      	orrs	r2, r1
 800107c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001082:	4a58      	ldr	r2, [pc, #352]	@ (80011e4 <ADC_Init+0x1f4>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d022      	beq.n	80010ce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	689a      	ldr	r2, [r3, #8]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001096:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	6899      	ldr	r1, [r3, #8]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	430a      	orrs	r2, r1
 80010a8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	689a      	ldr	r2, [r3, #8]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80010b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	6899      	ldr	r1, [r3, #8]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	430a      	orrs	r2, r1
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	e00f      	b.n	80010ee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	689a      	ldr	r2, [r3, #8]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80010dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	689a      	ldr	r2, [r3, #8]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80010ec:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	689a      	ldr	r2, [r3, #8]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f022 0202 	bic.w	r2, r2, #2
 80010fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	6899      	ldr	r1, [r3, #8]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	7e1b      	ldrb	r3, [r3, #24]
 8001108:	005a      	lsls	r2, r3, #1
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	430a      	orrs	r2, r1
 8001110:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d01b      	beq.n	8001154 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	685a      	ldr	r2, [r3, #4]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800112a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	685a      	ldr	r2, [r3, #4]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800113a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	6859      	ldr	r1, [r3, #4]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001146:	3b01      	subs	r3, #1
 8001148:	035a      	lsls	r2, r3, #13
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	430a      	orrs	r2, r1
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	e007      	b.n	8001164 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	685a      	ldr	r2, [r3, #4]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001162:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001172:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	69db      	ldr	r3, [r3, #28]
 800117e:	3b01      	subs	r3, #1
 8001180:	051a      	lsls	r2, r3, #20
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	430a      	orrs	r2, r1
 8001188:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	689a      	ldr	r2, [r3, #8]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001198:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	6899      	ldr	r1, [r3, #8]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80011a6:	025a      	lsls	r2, r3, #9
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	430a      	orrs	r2, r1
 80011ae:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	689a      	ldr	r2, [r3, #8]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80011be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	6899      	ldr	r1, [r3, #8]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	695b      	ldr	r3, [r3, #20]
 80011ca:	029a      	lsls	r2, r3, #10
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	430a      	orrs	r2, r1
 80011d2:	609a      	str	r2, [r3, #8]
}
 80011d4:	bf00      	nop
 80011d6:	3714      	adds	r7, #20
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	40012300 	.word	0x40012300
 80011e4:	0f000001 	.word	0x0f000001

080011e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f003 0307 	and.w	r3, r3, #7
 80011f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011f8:	4b0c      	ldr	r3, [pc, #48]	@ (800122c <__NVIC_SetPriorityGrouping+0x44>)
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011fe:	68ba      	ldr	r2, [r7, #8]
 8001200:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001204:	4013      	ands	r3, r2
 8001206:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001210:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001214:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001218:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800121a:	4a04      	ldr	r2, [pc, #16]	@ (800122c <__NVIC_SetPriorityGrouping+0x44>)
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	60d3      	str	r3, [r2, #12]
}
 8001220:	bf00      	nop
 8001222:	3714      	adds	r7, #20
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001234:	4b04      	ldr	r3, [pc, #16]	@ (8001248 <__NVIC_GetPriorityGrouping+0x18>)
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	0a1b      	lsrs	r3, r3, #8
 800123a:	f003 0307 	and.w	r3, r3, #7
}
 800123e:	4618      	mov	r0, r3
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125a:	2b00      	cmp	r3, #0
 800125c:	db0b      	blt.n	8001276 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	f003 021f 	and.w	r2, r3, #31
 8001264:	4907      	ldr	r1, [pc, #28]	@ (8001284 <__NVIC_EnableIRQ+0x38>)
 8001266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126a:	095b      	lsrs	r3, r3, #5
 800126c:	2001      	movs	r0, #1
 800126e:	fa00 f202 	lsl.w	r2, r0, r2
 8001272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	e000e100 	.word	0xe000e100

08001288 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	6039      	str	r1, [r7, #0]
 8001292:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001298:	2b00      	cmp	r3, #0
 800129a:	db0a      	blt.n	80012b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	b2da      	uxtb	r2, r3
 80012a0:	490c      	ldr	r1, [pc, #48]	@ (80012d4 <__NVIC_SetPriority+0x4c>)
 80012a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a6:	0112      	lsls	r2, r2, #4
 80012a8:	b2d2      	uxtb	r2, r2
 80012aa:	440b      	add	r3, r1
 80012ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012b0:	e00a      	b.n	80012c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	4908      	ldr	r1, [pc, #32]	@ (80012d8 <__NVIC_SetPriority+0x50>)
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	f003 030f 	and.w	r3, r3, #15
 80012be:	3b04      	subs	r3, #4
 80012c0:	0112      	lsls	r2, r2, #4
 80012c2:	b2d2      	uxtb	r2, r2
 80012c4:	440b      	add	r3, r1
 80012c6:	761a      	strb	r2, [r3, #24]
}
 80012c8:	bf00      	nop
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	e000e100 	.word	0xe000e100
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012dc:	b480      	push	{r7}
 80012de:	b089      	sub	sp, #36	@ 0x24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	f003 0307 	and.w	r3, r3, #7
 80012ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	f1c3 0307 	rsb	r3, r3, #7
 80012f6:	2b04      	cmp	r3, #4
 80012f8:	bf28      	it	cs
 80012fa:	2304      	movcs	r3, #4
 80012fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	3304      	adds	r3, #4
 8001302:	2b06      	cmp	r3, #6
 8001304:	d902      	bls.n	800130c <NVIC_EncodePriority+0x30>
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	3b03      	subs	r3, #3
 800130a:	e000      	b.n	800130e <NVIC_EncodePriority+0x32>
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001310:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	43da      	mvns	r2, r3
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	401a      	ands	r2, r3
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001324:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	fa01 f303 	lsl.w	r3, r1, r3
 800132e:	43d9      	mvns	r1, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001334:	4313      	orrs	r3, r2
         );
}
 8001336:	4618      	mov	r0, r3
 8001338:	3724      	adds	r7, #36	@ 0x24
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr

08001342 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b082      	sub	sp, #8
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f7ff ff4c 	bl	80011e8 <__NVIC_SetPriorityGrouping>
}
 8001350:	bf00      	nop
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
 8001364:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001366:	2300      	movs	r3, #0
 8001368:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800136a:	f7ff ff61 	bl	8001230 <__NVIC_GetPriorityGrouping>
 800136e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	68b9      	ldr	r1, [r7, #8]
 8001374:	6978      	ldr	r0, [r7, #20]
 8001376:	f7ff ffb1 	bl	80012dc <NVIC_EncodePriority>
 800137a:	4602      	mov	r2, r0
 800137c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001380:	4611      	mov	r1, r2
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff ff80 	bl	8001288 <__NVIC_SetPriority>
}
 8001388:	bf00      	nop
 800138a:	3718      	adds	r7, #24
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800139a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff ff54 	bl	800124c <__NVIC_EnableIRQ>
}
 80013a4:	bf00      	nop
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b089      	sub	sp, #36	@ 0x24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013b6:	2300      	movs	r3, #0
 80013b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013ba:	2300      	movs	r3, #0
 80013bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013be:	2300      	movs	r3, #0
 80013c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013c2:	2300      	movs	r3, #0
 80013c4:	61fb      	str	r3, [r7, #28]
 80013c6:	e16b      	b.n	80016a0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013c8:	2201      	movs	r2, #1
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	697a      	ldr	r2, [r7, #20]
 80013d8:	4013      	ands	r3, r2
 80013da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013dc:	693a      	ldr	r2, [r7, #16]
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	f040 815a 	bne.w	800169a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f003 0303 	and.w	r3, r3, #3
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d005      	beq.n	80013fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d130      	bne.n	8001460 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	2203      	movs	r2, #3
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	43db      	mvns	r3, r3
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	4013      	ands	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	68da      	ldr	r2, [r3, #12]
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4313      	orrs	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001434:	2201      	movs	r2, #1
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	43db      	mvns	r3, r3
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4013      	ands	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	091b      	lsrs	r3, r3, #4
 800144a:	f003 0201 	and.w	r2, r3, #1
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	4313      	orrs	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f003 0303 	and.w	r3, r3, #3
 8001468:	2b03      	cmp	r3, #3
 800146a:	d017      	beq.n	800149c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	2203      	movs	r2, #3
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	43db      	mvns	r3, r3
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4013      	ands	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	689a      	ldr	r2, [r3, #8]
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	4313      	orrs	r3, r2
 8001494:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f003 0303 	and.w	r3, r3, #3
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d123      	bne.n	80014f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	08da      	lsrs	r2, r3, #3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	3208      	adds	r2, #8
 80014b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	f003 0307 	and.w	r3, r3, #7
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	220f      	movs	r2, #15
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	43db      	mvns	r3, r3
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	4013      	ands	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	691a      	ldr	r2, [r3, #16]
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	f003 0307 	and.w	r3, r3, #7
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	4313      	orrs	r3, r2
 80014e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	08da      	lsrs	r2, r3, #3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	3208      	adds	r2, #8
 80014ea:	69b9      	ldr	r1, [r7, #24]
 80014ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	2203      	movs	r2, #3
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	43db      	mvns	r3, r3
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	4013      	ands	r3, r2
 8001506:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f003 0203 	and.w	r2, r3, #3
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	4313      	orrs	r3, r2
 800151c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800152c:	2b00      	cmp	r3, #0
 800152e:	f000 80b4 	beq.w	800169a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	60fb      	str	r3, [r7, #12]
 8001536:	4b60      	ldr	r3, [pc, #384]	@ (80016b8 <HAL_GPIO_Init+0x30c>)
 8001538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800153a:	4a5f      	ldr	r2, [pc, #380]	@ (80016b8 <HAL_GPIO_Init+0x30c>)
 800153c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001540:	6453      	str	r3, [r2, #68]	@ 0x44
 8001542:	4b5d      	ldr	r3, [pc, #372]	@ (80016b8 <HAL_GPIO_Init+0x30c>)
 8001544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001546:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800154e:	4a5b      	ldr	r2, [pc, #364]	@ (80016bc <HAL_GPIO_Init+0x310>)
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	089b      	lsrs	r3, r3, #2
 8001554:	3302      	adds	r3, #2
 8001556:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800155a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	f003 0303 	and.w	r3, r3, #3
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	220f      	movs	r2, #15
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	43db      	mvns	r3, r3
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	4013      	ands	r3, r2
 8001570:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a52      	ldr	r2, [pc, #328]	@ (80016c0 <HAL_GPIO_Init+0x314>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d02b      	beq.n	80015d2 <HAL_GPIO_Init+0x226>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a51      	ldr	r2, [pc, #324]	@ (80016c4 <HAL_GPIO_Init+0x318>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d025      	beq.n	80015ce <HAL_GPIO_Init+0x222>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a50      	ldr	r2, [pc, #320]	@ (80016c8 <HAL_GPIO_Init+0x31c>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d01f      	beq.n	80015ca <HAL_GPIO_Init+0x21e>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a4f      	ldr	r2, [pc, #316]	@ (80016cc <HAL_GPIO_Init+0x320>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d019      	beq.n	80015c6 <HAL_GPIO_Init+0x21a>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a4e      	ldr	r2, [pc, #312]	@ (80016d0 <HAL_GPIO_Init+0x324>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d013      	beq.n	80015c2 <HAL_GPIO_Init+0x216>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a4d      	ldr	r2, [pc, #308]	@ (80016d4 <HAL_GPIO_Init+0x328>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d00d      	beq.n	80015be <HAL_GPIO_Init+0x212>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a4c      	ldr	r2, [pc, #304]	@ (80016d8 <HAL_GPIO_Init+0x32c>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d007      	beq.n	80015ba <HAL_GPIO_Init+0x20e>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a4b      	ldr	r2, [pc, #300]	@ (80016dc <HAL_GPIO_Init+0x330>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d101      	bne.n	80015b6 <HAL_GPIO_Init+0x20a>
 80015b2:	2307      	movs	r3, #7
 80015b4:	e00e      	b.n	80015d4 <HAL_GPIO_Init+0x228>
 80015b6:	2308      	movs	r3, #8
 80015b8:	e00c      	b.n	80015d4 <HAL_GPIO_Init+0x228>
 80015ba:	2306      	movs	r3, #6
 80015bc:	e00a      	b.n	80015d4 <HAL_GPIO_Init+0x228>
 80015be:	2305      	movs	r3, #5
 80015c0:	e008      	b.n	80015d4 <HAL_GPIO_Init+0x228>
 80015c2:	2304      	movs	r3, #4
 80015c4:	e006      	b.n	80015d4 <HAL_GPIO_Init+0x228>
 80015c6:	2303      	movs	r3, #3
 80015c8:	e004      	b.n	80015d4 <HAL_GPIO_Init+0x228>
 80015ca:	2302      	movs	r3, #2
 80015cc:	e002      	b.n	80015d4 <HAL_GPIO_Init+0x228>
 80015ce:	2301      	movs	r3, #1
 80015d0:	e000      	b.n	80015d4 <HAL_GPIO_Init+0x228>
 80015d2:	2300      	movs	r3, #0
 80015d4:	69fa      	ldr	r2, [r7, #28]
 80015d6:	f002 0203 	and.w	r2, r2, #3
 80015da:	0092      	lsls	r2, r2, #2
 80015dc:	4093      	lsls	r3, r2
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015e4:	4935      	ldr	r1, [pc, #212]	@ (80016bc <HAL_GPIO_Init+0x310>)
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	089b      	lsrs	r3, r3, #2
 80015ea:	3302      	adds	r3, #2
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015f2:	4b3b      	ldr	r3, [pc, #236]	@ (80016e0 <HAL_GPIO_Init+0x334>)
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	43db      	mvns	r3, r3
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	4013      	ands	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d003      	beq.n	8001616 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	4313      	orrs	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001616:	4a32      	ldr	r2, [pc, #200]	@ (80016e0 <HAL_GPIO_Init+0x334>)
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800161c:	4b30      	ldr	r3, [pc, #192]	@ (80016e0 <HAL_GPIO_Init+0x334>)
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	43db      	mvns	r3, r3
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	4013      	ands	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d003      	beq.n	8001640 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	4313      	orrs	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001640:	4a27      	ldr	r2, [pc, #156]	@ (80016e0 <HAL_GPIO_Init+0x334>)
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001646:	4b26      	ldr	r3, [pc, #152]	@ (80016e0 <HAL_GPIO_Init+0x334>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	43db      	mvns	r3, r3
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	4013      	ands	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d003      	beq.n	800166a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	4313      	orrs	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800166a:	4a1d      	ldr	r2, [pc, #116]	@ (80016e0 <HAL_GPIO_Init+0x334>)
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001670:	4b1b      	ldr	r3, [pc, #108]	@ (80016e0 <HAL_GPIO_Init+0x334>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	43db      	mvns	r3, r3
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	4013      	ands	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d003      	beq.n	8001694 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	4313      	orrs	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001694:	4a12      	ldr	r2, [pc, #72]	@ (80016e0 <HAL_GPIO_Init+0x334>)
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	3301      	adds	r3, #1
 800169e:	61fb      	str	r3, [r7, #28]
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	2b0f      	cmp	r3, #15
 80016a4:	f67f ae90 	bls.w	80013c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016a8:	bf00      	nop
 80016aa:	bf00      	nop
 80016ac:	3724      	adds	r7, #36	@ 0x24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	40023800 	.word	0x40023800
 80016bc:	40013800 	.word	0x40013800
 80016c0:	40020000 	.word	0x40020000
 80016c4:	40020400 	.word	0x40020400
 80016c8:	40020800 	.word	0x40020800
 80016cc:	40020c00 	.word	0x40020c00
 80016d0:	40021000 	.word	0x40021000
 80016d4:	40021400 	.word	0x40021400
 80016d8:	40021800 	.word	0x40021800
 80016dc:	40021c00 	.word	0x40021c00
 80016e0:	40013c00 	.word	0x40013c00

080016e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	460b      	mov	r3, r1
 80016ee:	807b      	strh	r3, [r7, #2]
 80016f0:	4613      	mov	r3, r2
 80016f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016f4:	787b      	ldrb	r3, [r7, #1]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d003      	beq.n	8001702 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016fa:	887a      	ldrh	r2, [r7, #2]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001700:	e003      	b.n	800170a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001702:	887b      	ldrh	r3, [r7, #2]
 8001704:	041a      	lsls	r2, r3, #16
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	619a      	str	r2, [r3, #24]
}
 800170a:	bf00      	nop
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001716:	b480      	push	{r7}
 8001718:	b085      	sub	sp, #20
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
 800171e:	460b      	mov	r3, r1
 8001720:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	695b      	ldr	r3, [r3, #20]
 8001726:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001728:	887a      	ldrh	r2, [r7, #2]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	4013      	ands	r3, r2
 800172e:	041a      	lsls	r2, r3, #16
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	43d9      	mvns	r1, r3
 8001734:	887b      	ldrh	r3, [r7, #2]
 8001736:	400b      	ands	r3, r1
 8001738:	431a      	orrs	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	619a      	str	r2, [r3, #24]
}
 800173e:	bf00      	nop
 8001740:	3714      	adds	r7, #20
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
	...

0800174c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e267      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	2b00      	cmp	r3, #0
 8001768:	d075      	beq.n	8001856 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800176a:	4b88      	ldr	r3, [pc, #544]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	f003 030c 	and.w	r3, r3, #12
 8001772:	2b04      	cmp	r3, #4
 8001774:	d00c      	beq.n	8001790 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001776:	4b85      	ldr	r3, [pc, #532]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800177e:	2b08      	cmp	r3, #8
 8001780:	d112      	bne.n	80017a8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001782:	4b82      	ldr	r3, [pc, #520]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800178a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800178e:	d10b      	bne.n	80017a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001790:	4b7e      	ldr	r3, [pc, #504]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d05b      	beq.n	8001854 <HAL_RCC_OscConfig+0x108>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d157      	bne.n	8001854 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e242      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017b0:	d106      	bne.n	80017c0 <HAL_RCC_OscConfig+0x74>
 80017b2:	4b76      	ldr	r3, [pc, #472]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a75      	ldr	r2, [pc, #468]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 80017b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017bc:	6013      	str	r3, [r2, #0]
 80017be:	e01d      	b.n	80017fc <HAL_RCC_OscConfig+0xb0>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017c8:	d10c      	bne.n	80017e4 <HAL_RCC_OscConfig+0x98>
 80017ca:	4b70      	ldr	r3, [pc, #448]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a6f      	ldr	r2, [pc, #444]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 80017d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017d4:	6013      	str	r3, [r2, #0]
 80017d6:	4b6d      	ldr	r3, [pc, #436]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a6c      	ldr	r2, [pc, #432]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 80017dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017e0:	6013      	str	r3, [r2, #0]
 80017e2:	e00b      	b.n	80017fc <HAL_RCC_OscConfig+0xb0>
 80017e4:	4b69      	ldr	r3, [pc, #420]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a68      	ldr	r2, [pc, #416]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 80017ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017ee:	6013      	str	r3, [r2, #0]
 80017f0:	4b66      	ldr	r3, [pc, #408]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a65      	ldr	r2, [pc, #404]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 80017f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d013      	beq.n	800182c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001804:	f7ff fa82 	bl	8000d0c <HAL_GetTick>
 8001808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800180a:	e008      	b.n	800181e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800180c:	f7ff fa7e 	bl	8000d0c <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b64      	cmp	r3, #100	@ 0x64
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e207      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800181e:	4b5b      	ldr	r3, [pc, #364]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d0f0      	beq.n	800180c <HAL_RCC_OscConfig+0xc0>
 800182a:	e014      	b.n	8001856 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182c:	f7ff fa6e 	bl	8000d0c <HAL_GetTick>
 8001830:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001832:	e008      	b.n	8001846 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001834:	f7ff fa6a 	bl	8000d0c <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b64      	cmp	r3, #100	@ 0x64
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e1f3      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001846:	4b51      	ldr	r3, [pc, #324]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1f0      	bne.n	8001834 <HAL_RCC_OscConfig+0xe8>
 8001852:	e000      	b.n	8001856 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001854:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d063      	beq.n	800192a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001862:	4b4a      	ldr	r3, [pc, #296]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f003 030c 	and.w	r3, r3, #12
 800186a:	2b00      	cmp	r3, #0
 800186c:	d00b      	beq.n	8001886 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800186e:	4b47      	ldr	r3, [pc, #284]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001876:	2b08      	cmp	r3, #8
 8001878:	d11c      	bne.n	80018b4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800187a:	4b44      	ldr	r3, [pc, #272]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d116      	bne.n	80018b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001886:	4b41      	ldr	r3, [pc, #260]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	2b00      	cmp	r3, #0
 8001890:	d005      	beq.n	800189e <HAL_RCC_OscConfig+0x152>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	2b01      	cmp	r3, #1
 8001898:	d001      	beq.n	800189e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e1c7      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800189e:	4b3b      	ldr	r3, [pc, #236]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	691b      	ldr	r3, [r3, #16]
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	4937      	ldr	r1, [pc, #220]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 80018ae:	4313      	orrs	r3, r2
 80018b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018b2:	e03a      	b.n	800192a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d020      	beq.n	80018fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018bc:	4b34      	ldr	r3, [pc, #208]	@ (8001990 <HAL_RCC_OscConfig+0x244>)
 80018be:	2201      	movs	r2, #1
 80018c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c2:	f7ff fa23 	bl	8000d0c <HAL_GetTick>
 80018c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018c8:	e008      	b.n	80018dc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ca:	f7ff fa1f 	bl	8000d0c <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d901      	bls.n	80018dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e1a8      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018dc:	4b2b      	ldr	r3, [pc, #172]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0302 	and.w	r3, r3, #2
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d0f0      	beq.n	80018ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e8:	4b28      	ldr	r3, [pc, #160]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	691b      	ldr	r3, [r3, #16]
 80018f4:	00db      	lsls	r3, r3, #3
 80018f6:	4925      	ldr	r1, [pc, #148]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 80018f8:	4313      	orrs	r3, r2
 80018fa:	600b      	str	r3, [r1, #0]
 80018fc:	e015      	b.n	800192a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018fe:	4b24      	ldr	r3, [pc, #144]	@ (8001990 <HAL_RCC_OscConfig+0x244>)
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001904:	f7ff fa02 	bl	8000d0c <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800190c:	f7ff f9fe 	bl	8000d0c <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e187      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800191e:	4b1b      	ldr	r3, [pc, #108]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d1f0      	bne.n	800190c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0308 	and.w	r3, r3, #8
 8001932:	2b00      	cmp	r3, #0
 8001934:	d036      	beq.n	80019a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	695b      	ldr	r3, [r3, #20]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d016      	beq.n	800196c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800193e:	4b15      	ldr	r3, [pc, #84]	@ (8001994 <HAL_RCC_OscConfig+0x248>)
 8001940:	2201      	movs	r2, #1
 8001942:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001944:	f7ff f9e2 	bl	8000d0c <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800194c:	f7ff f9de 	bl	8000d0c <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e167      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800195e:	4b0b      	ldr	r3, [pc, #44]	@ (800198c <HAL_RCC_OscConfig+0x240>)
 8001960:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d0f0      	beq.n	800194c <HAL_RCC_OscConfig+0x200>
 800196a:	e01b      	b.n	80019a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800196c:	4b09      	ldr	r3, [pc, #36]	@ (8001994 <HAL_RCC_OscConfig+0x248>)
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001972:	f7ff f9cb 	bl	8000d0c <HAL_GetTick>
 8001976:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001978:	e00e      	b.n	8001998 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800197a:	f7ff f9c7 	bl	8000d0c <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d907      	bls.n	8001998 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e150      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
 800198c:	40023800 	.word	0x40023800
 8001990:	42470000 	.word	0x42470000
 8001994:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001998:	4b88      	ldr	r3, [pc, #544]	@ (8001bbc <HAL_RCC_OscConfig+0x470>)
 800199a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800199c:	f003 0302 	and.w	r3, r3, #2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d1ea      	bne.n	800197a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0304 	and.w	r3, r3, #4
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	f000 8097 	beq.w	8001ae0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019b2:	2300      	movs	r3, #0
 80019b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019b6:	4b81      	ldr	r3, [pc, #516]	@ (8001bbc <HAL_RCC_OscConfig+0x470>)
 80019b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d10f      	bne.n	80019e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	60bb      	str	r3, [r7, #8]
 80019c6:	4b7d      	ldr	r3, [pc, #500]	@ (8001bbc <HAL_RCC_OscConfig+0x470>)
 80019c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ca:	4a7c      	ldr	r2, [pc, #496]	@ (8001bbc <HAL_RCC_OscConfig+0x470>)
 80019cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80019d2:	4b7a      	ldr	r3, [pc, #488]	@ (8001bbc <HAL_RCC_OscConfig+0x470>)
 80019d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019da:	60bb      	str	r3, [r7, #8]
 80019dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019de:	2301      	movs	r3, #1
 80019e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e2:	4b77      	ldr	r3, [pc, #476]	@ (8001bc0 <HAL_RCC_OscConfig+0x474>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d118      	bne.n	8001a20 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019ee:	4b74      	ldr	r3, [pc, #464]	@ (8001bc0 <HAL_RCC_OscConfig+0x474>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a73      	ldr	r2, [pc, #460]	@ (8001bc0 <HAL_RCC_OscConfig+0x474>)
 80019f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019fa:	f7ff f987 	bl	8000d0c <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a00:	e008      	b.n	8001a14 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a02:	f7ff f983 	bl	8000d0c <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e10c      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a14:	4b6a      	ldr	r3, [pc, #424]	@ (8001bc0 <HAL_RCC_OscConfig+0x474>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d0f0      	beq.n	8001a02 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d106      	bne.n	8001a36 <HAL_RCC_OscConfig+0x2ea>
 8001a28:	4b64      	ldr	r3, [pc, #400]	@ (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001a2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a2c:	4a63      	ldr	r2, [pc, #396]	@ (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001a2e:	f043 0301 	orr.w	r3, r3, #1
 8001a32:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a34:	e01c      	b.n	8001a70 <HAL_RCC_OscConfig+0x324>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	2b05      	cmp	r3, #5
 8001a3c:	d10c      	bne.n	8001a58 <HAL_RCC_OscConfig+0x30c>
 8001a3e:	4b5f      	ldr	r3, [pc, #380]	@ (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001a40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a42:	4a5e      	ldr	r2, [pc, #376]	@ (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001a44:	f043 0304 	orr.w	r3, r3, #4
 8001a48:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a4a:	4b5c      	ldr	r3, [pc, #368]	@ (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001a4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a4e:	4a5b      	ldr	r2, [pc, #364]	@ (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001a50:	f043 0301 	orr.w	r3, r3, #1
 8001a54:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a56:	e00b      	b.n	8001a70 <HAL_RCC_OscConfig+0x324>
 8001a58:	4b58      	ldr	r3, [pc, #352]	@ (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001a5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a5c:	4a57      	ldr	r2, [pc, #348]	@ (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001a5e:	f023 0301 	bic.w	r3, r3, #1
 8001a62:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a64:	4b55      	ldr	r3, [pc, #340]	@ (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001a66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a68:	4a54      	ldr	r2, [pc, #336]	@ (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001a6a:	f023 0304 	bic.w	r3, r3, #4
 8001a6e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d015      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a78:	f7ff f948 	bl	8000d0c <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a7e:	e00a      	b.n	8001a96 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a80:	f7ff f944 	bl	8000d0c <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e0cb      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a96:	4b49      	ldr	r3, [pc, #292]	@ (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001a98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d0ee      	beq.n	8001a80 <HAL_RCC_OscConfig+0x334>
 8001aa2:	e014      	b.n	8001ace <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aa4:	f7ff f932 	bl	8000d0c <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aaa:	e00a      	b.n	8001ac2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aac:	f7ff f92e 	bl	8000d0c <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e0b5      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ac2:	4b3e      	ldr	r3, [pc, #248]	@ (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001ac4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1ee      	bne.n	8001aac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ace:	7dfb      	ldrb	r3, [r7, #23]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d105      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ad4:	4b39      	ldr	r3, [pc, #228]	@ (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad8:	4a38      	ldr	r2, [pc, #224]	@ (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001ada:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ade:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f000 80a1 	beq.w	8001c2c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001aea:	4b34      	ldr	r3, [pc, #208]	@ (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f003 030c 	and.w	r3, r3, #12
 8001af2:	2b08      	cmp	r3, #8
 8001af4:	d05c      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d141      	bne.n	8001b82 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001afe:	4b31      	ldr	r3, [pc, #196]	@ (8001bc4 <HAL_RCC_OscConfig+0x478>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b04:	f7ff f902 	bl	8000d0c <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b0c:	f7ff f8fe 	bl	8000d0c <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e087      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b1e:	4b27      	ldr	r3, [pc, #156]	@ (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1f0      	bne.n	8001b0c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	69da      	ldr	r2, [r3, #28]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a1b      	ldr	r3, [r3, #32]
 8001b32:	431a      	orrs	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b38:	019b      	lsls	r3, r3, #6
 8001b3a:	431a      	orrs	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b40:	085b      	lsrs	r3, r3, #1
 8001b42:	3b01      	subs	r3, #1
 8001b44:	041b      	lsls	r3, r3, #16
 8001b46:	431a      	orrs	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b4c:	061b      	lsls	r3, r3, #24
 8001b4e:	491b      	ldr	r1, [pc, #108]	@ (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001b50:	4313      	orrs	r3, r2
 8001b52:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b54:	4b1b      	ldr	r3, [pc, #108]	@ (8001bc4 <HAL_RCC_OscConfig+0x478>)
 8001b56:	2201      	movs	r2, #1
 8001b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5a:	f7ff f8d7 	bl	8000d0c <HAL_GetTick>
 8001b5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b60:	e008      	b.n	8001b74 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b62:	f7ff f8d3 	bl	8000d0c <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d901      	bls.n	8001b74 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e05c      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b74:	4b11      	ldr	r3, [pc, #68]	@ (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d0f0      	beq.n	8001b62 <HAL_RCC_OscConfig+0x416>
 8001b80:	e054      	b.n	8001c2c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b82:	4b10      	ldr	r3, [pc, #64]	@ (8001bc4 <HAL_RCC_OscConfig+0x478>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b88:	f7ff f8c0 	bl	8000d0c <HAL_GetTick>
 8001b8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b8e:	e008      	b.n	8001ba2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b90:	f7ff f8bc 	bl	8000d0c <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e045      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ba2:	4b06      	ldr	r3, [pc, #24]	@ (8001bbc <HAL_RCC_OscConfig+0x470>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d1f0      	bne.n	8001b90 <HAL_RCC_OscConfig+0x444>
 8001bae:	e03d      	b.n	8001c2c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d107      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e038      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	40007000 	.word	0x40007000
 8001bc4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001bc8:	4b1b      	ldr	r3, [pc, #108]	@ (8001c38 <HAL_RCC_OscConfig+0x4ec>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	699b      	ldr	r3, [r3, #24]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d028      	beq.n	8001c28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d121      	bne.n	8001c28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d11a      	bne.n	8001c28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bf2:	68fa      	ldr	r2, [r7, #12]
 8001bf4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001bfe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d111      	bne.n	8001c28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c0e:	085b      	lsrs	r3, r3, #1
 8001c10:	3b01      	subs	r3, #1
 8001c12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d107      	bne.n	8001c28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d001      	beq.n	8001c2c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e000      	b.n	8001c2e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3718      	adds	r7, #24
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40023800 	.word	0x40023800

08001c3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d101      	bne.n	8001c50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e0cc      	b.n	8001dea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c50:	4b68      	ldr	r3, [pc, #416]	@ (8001df4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0307 	and.w	r3, r3, #7
 8001c58:	683a      	ldr	r2, [r7, #0]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d90c      	bls.n	8001c78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c5e:	4b65      	ldr	r3, [pc, #404]	@ (8001df4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c60:	683a      	ldr	r2, [r7, #0]
 8001c62:	b2d2      	uxtb	r2, r2
 8001c64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c66:	4b63      	ldr	r3, [pc, #396]	@ (8001df4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0307 	and.w	r3, r3, #7
 8001c6e:	683a      	ldr	r2, [r7, #0]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d001      	beq.n	8001c78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e0b8      	b.n	8001dea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0302 	and.w	r3, r3, #2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d020      	beq.n	8001cc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0304 	and.w	r3, r3, #4
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d005      	beq.n	8001c9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c90:	4b59      	ldr	r3, [pc, #356]	@ (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	4a58      	ldr	r2, [pc, #352]	@ (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c96:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001c9a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0308 	and.w	r3, r3, #8
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d005      	beq.n	8001cb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ca8:	4b53      	ldr	r3, [pc, #332]	@ (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	4a52      	ldr	r2, [pc, #328]	@ (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001cb2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cb4:	4b50      	ldr	r3, [pc, #320]	@ (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	494d      	ldr	r1, [pc, #308]	@ (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d044      	beq.n	8001d5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d107      	bne.n	8001cea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cda:	4b47      	ldr	r3, [pc, #284]	@ (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d119      	bne.n	8001d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e07f      	b.n	8001dea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d003      	beq.n	8001cfa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cf6:	2b03      	cmp	r3, #3
 8001cf8:	d107      	bne.n	8001d0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cfa:	4b3f      	ldr	r3, [pc, #252]	@ (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d109      	bne.n	8001d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e06f      	b.n	8001dea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d0a:	4b3b      	ldr	r3, [pc, #236]	@ (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d101      	bne.n	8001d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e067      	b.n	8001dea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d1a:	4b37      	ldr	r3, [pc, #220]	@ (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f023 0203 	bic.w	r2, r3, #3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	4934      	ldr	r1, [pc, #208]	@ (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d2c:	f7fe ffee 	bl	8000d0c <HAL_GetTick>
 8001d30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d32:	e00a      	b.n	8001d4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d34:	f7fe ffea 	bl	8000d0c <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e04f      	b.n	8001dea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d4a:	4b2b      	ldr	r3, [pc, #172]	@ (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f003 020c 	and.w	r2, r3, #12
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d1eb      	bne.n	8001d34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d5c:	4b25      	ldr	r3, [pc, #148]	@ (8001df4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0307 	and.w	r3, r3, #7
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d20c      	bcs.n	8001d84 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d6a:	4b22      	ldr	r3, [pc, #136]	@ (8001df4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d6c:	683a      	ldr	r2, [r7, #0]
 8001d6e:	b2d2      	uxtb	r2, r2
 8001d70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d72:	4b20      	ldr	r3, [pc, #128]	@ (8001df4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0307 	and.w	r3, r3, #7
 8001d7a:	683a      	ldr	r2, [r7, #0]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d001      	beq.n	8001d84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e032      	b.n	8001dea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0304 	and.w	r3, r3, #4
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d008      	beq.n	8001da2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d90:	4b19      	ldr	r3, [pc, #100]	@ (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	4916      	ldr	r1, [pc, #88]	@ (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0308 	and.w	r3, r3, #8
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d009      	beq.n	8001dc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dae:	4b12      	ldr	r3, [pc, #72]	@ (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	490e      	ldr	r1, [pc, #56]	@ (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001dc2:	f000 f821 	bl	8001e08 <HAL_RCC_GetSysClockFreq>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	4b0b      	ldr	r3, [pc, #44]	@ (8001df8 <HAL_RCC_ClockConfig+0x1bc>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	091b      	lsrs	r3, r3, #4
 8001dce:	f003 030f 	and.w	r3, r3, #15
 8001dd2:	490a      	ldr	r1, [pc, #40]	@ (8001dfc <HAL_RCC_ClockConfig+0x1c0>)
 8001dd4:	5ccb      	ldrb	r3, [r1, r3]
 8001dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8001dda:	4a09      	ldr	r2, [pc, #36]	@ (8001e00 <HAL_RCC_ClockConfig+0x1c4>)
 8001ddc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001dde:	4b09      	ldr	r3, [pc, #36]	@ (8001e04 <HAL_RCC_ClockConfig+0x1c8>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7fe fe86 	bl	8000af4 <HAL_InitTick>

  return HAL_OK;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3710      	adds	r7, #16
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	40023c00 	.word	0x40023c00
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	08004580 	.word	0x08004580
 8001e00:	20000000 	.word	0x20000000
 8001e04:	20000004 	.word	0x20000004

08001e08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e0c:	b094      	sub	sp, #80	@ 0x50
 8001e0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001e10:	2300      	movs	r3, #0
 8001e12:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001e14:	2300      	movs	r3, #0
 8001e16:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e20:	4b79      	ldr	r3, [pc, #484]	@ (8002008 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f003 030c 	and.w	r3, r3, #12
 8001e28:	2b08      	cmp	r3, #8
 8001e2a:	d00d      	beq.n	8001e48 <HAL_RCC_GetSysClockFreq+0x40>
 8001e2c:	2b08      	cmp	r3, #8
 8001e2e:	f200 80e1 	bhi.w	8001ff4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d002      	beq.n	8001e3c <HAL_RCC_GetSysClockFreq+0x34>
 8001e36:	2b04      	cmp	r3, #4
 8001e38:	d003      	beq.n	8001e42 <HAL_RCC_GetSysClockFreq+0x3a>
 8001e3a:	e0db      	b.n	8001ff4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e3c:	4b73      	ldr	r3, [pc, #460]	@ (800200c <HAL_RCC_GetSysClockFreq+0x204>)
 8001e3e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e40:	e0db      	b.n	8001ffa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e42:	4b73      	ldr	r3, [pc, #460]	@ (8002010 <HAL_RCC_GetSysClockFreq+0x208>)
 8001e44:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e46:	e0d8      	b.n	8001ffa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e48:	4b6f      	ldr	r3, [pc, #444]	@ (8002008 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e50:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e52:	4b6d      	ldr	r3, [pc, #436]	@ (8002008 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d063      	beq.n	8001f26 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e5e:	4b6a      	ldr	r3, [pc, #424]	@ (8002008 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	099b      	lsrs	r3, r3, #6
 8001e64:	2200      	movs	r2, #0
 8001e66:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001e68:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e70:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e72:	2300      	movs	r3, #0
 8001e74:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e76:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001e7a:	4622      	mov	r2, r4
 8001e7c:	462b      	mov	r3, r5
 8001e7e:	f04f 0000 	mov.w	r0, #0
 8001e82:	f04f 0100 	mov.w	r1, #0
 8001e86:	0159      	lsls	r1, r3, #5
 8001e88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e8c:	0150      	lsls	r0, r2, #5
 8001e8e:	4602      	mov	r2, r0
 8001e90:	460b      	mov	r3, r1
 8001e92:	4621      	mov	r1, r4
 8001e94:	1a51      	subs	r1, r2, r1
 8001e96:	6139      	str	r1, [r7, #16]
 8001e98:	4629      	mov	r1, r5
 8001e9a:	eb63 0301 	sbc.w	r3, r3, r1
 8001e9e:	617b      	str	r3, [r7, #20]
 8001ea0:	f04f 0200 	mov.w	r2, #0
 8001ea4:	f04f 0300 	mov.w	r3, #0
 8001ea8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001eac:	4659      	mov	r1, fp
 8001eae:	018b      	lsls	r3, r1, #6
 8001eb0:	4651      	mov	r1, sl
 8001eb2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001eb6:	4651      	mov	r1, sl
 8001eb8:	018a      	lsls	r2, r1, #6
 8001eba:	4651      	mov	r1, sl
 8001ebc:	ebb2 0801 	subs.w	r8, r2, r1
 8001ec0:	4659      	mov	r1, fp
 8001ec2:	eb63 0901 	sbc.w	r9, r3, r1
 8001ec6:	f04f 0200 	mov.w	r2, #0
 8001eca:	f04f 0300 	mov.w	r3, #0
 8001ece:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ed2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ed6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001eda:	4690      	mov	r8, r2
 8001edc:	4699      	mov	r9, r3
 8001ede:	4623      	mov	r3, r4
 8001ee0:	eb18 0303 	adds.w	r3, r8, r3
 8001ee4:	60bb      	str	r3, [r7, #8]
 8001ee6:	462b      	mov	r3, r5
 8001ee8:	eb49 0303 	adc.w	r3, r9, r3
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	f04f 0200 	mov.w	r2, #0
 8001ef2:	f04f 0300 	mov.w	r3, #0
 8001ef6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001efa:	4629      	mov	r1, r5
 8001efc:	024b      	lsls	r3, r1, #9
 8001efe:	4621      	mov	r1, r4
 8001f00:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001f04:	4621      	mov	r1, r4
 8001f06:	024a      	lsls	r2, r1, #9
 8001f08:	4610      	mov	r0, r2
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f0e:	2200      	movs	r2, #0
 8001f10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001f14:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001f18:	f7fe f95a 	bl	80001d0 <__aeabi_uldivmod>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	4613      	mov	r3, r2
 8001f22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001f24:	e058      	b.n	8001fd8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f26:	4b38      	ldr	r3, [pc, #224]	@ (8002008 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	099b      	lsrs	r3, r3, #6
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	4618      	mov	r0, r3
 8001f30:	4611      	mov	r1, r2
 8001f32:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001f36:	623b      	str	r3, [r7, #32]
 8001f38:	2300      	movs	r3, #0
 8001f3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f3c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001f40:	4642      	mov	r2, r8
 8001f42:	464b      	mov	r3, r9
 8001f44:	f04f 0000 	mov.w	r0, #0
 8001f48:	f04f 0100 	mov.w	r1, #0
 8001f4c:	0159      	lsls	r1, r3, #5
 8001f4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f52:	0150      	lsls	r0, r2, #5
 8001f54:	4602      	mov	r2, r0
 8001f56:	460b      	mov	r3, r1
 8001f58:	4641      	mov	r1, r8
 8001f5a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f5e:	4649      	mov	r1, r9
 8001f60:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f64:	f04f 0200 	mov.w	r2, #0
 8001f68:	f04f 0300 	mov.w	r3, #0
 8001f6c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001f70:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001f74:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001f78:	ebb2 040a 	subs.w	r4, r2, sl
 8001f7c:	eb63 050b 	sbc.w	r5, r3, fp
 8001f80:	f04f 0200 	mov.w	r2, #0
 8001f84:	f04f 0300 	mov.w	r3, #0
 8001f88:	00eb      	lsls	r3, r5, #3
 8001f8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f8e:	00e2      	lsls	r2, r4, #3
 8001f90:	4614      	mov	r4, r2
 8001f92:	461d      	mov	r5, r3
 8001f94:	4643      	mov	r3, r8
 8001f96:	18e3      	adds	r3, r4, r3
 8001f98:	603b      	str	r3, [r7, #0]
 8001f9a:	464b      	mov	r3, r9
 8001f9c:	eb45 0303 	adc.w	r3, r5, r3
 8001fa0:	607b      	str	r3, [r7, #4]
 8001fa2:	f04f 0200 	mov.w	r2, #0
 8001fa6:	f04f 0300 	mov.w	r3, #0
 8001faa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001fae:	4629      	mov	r1, r5
 8001fb0:	028b      	lsls	r3, r1, #10
 8001fb2:	4621      	mov	r1, r4
 8001fb4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001fb8:	4621      	mov	r1, r4
 8001fba:	028a      	lsls	r2, r1, #10
 8001fbc:	4610      	mov	r0, r2
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	61bb      	str	r3, [r7, #24]
 8001fc6:	61fa      	str	r2, [r7, #28]
 8001fc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fcc:	f7fe f900 	bl	80001d0 <__aeabi_uldivmod>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001fd8:	4b0b      	ldr	r3, [pc, #44]	@ (8002008 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	0c1b      	lsrs	r3, r3, #16
 8001fde:	f003 0303 	and.w	r3, r3, #3
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001fe8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001fea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ff2:	e002      	b.n	8001ffa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ff4:	4b05      	ldr	r3, [pc, #20]	@ (800200c <HAL_RCC_GetSysClockFreq+0x204>)
 8001ff6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ff8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ffa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3750      	adds	r7, #80	@ 0x50
 8002000:	46bd      	mov	sp, r7
 8002002:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002006:	bf00      	nop
 8002008:	40023800 	.word	0x40023800
 800200c:	00f42400 	.word	0x00f42400
 8002010:	007a1200 	.word	0x007a1200

08002014 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002018:	4b03      	ldr	r3, [pc, #12]	@ (8002028 <HAL_RCC_GetHCLKFreq+0x14>)
 800201a:	681b      	ldr	r3, [r3, #0]
}
 800201c:	4618      	mov	r0, r3
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	20000000 	.word	0x20000000

0800202c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002030:	f7ff fff0 	bl	8002014 <HAL_RCC_GetHCLKFreq>
 8002034:	4602      	mov	r2, r0
 8002036:	4b05      	ldr	r3, [pc, #20]	@ (800204c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	0a9b      	lsrs	r3, r3, #10
 800203c:	f003 0307 	and.w	r3, r3, #7
 8002040:	4903      	ldr	r1, [pc, #12]	@ (8002050 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002042:	5ccb      	ldrb	r3, [r1, r3]
 8002044:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002048:	4618      	mov	r0, r3
 800204a:	bd80      	pop	{r7, pc}
 800204c:	40023800 	.word	0x40023800
 8002050:	08004590 	.word	0x08004590

08002054 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002058:	f7ff ffdc 	bl	8002014 <HAL_RCC_GetHCLKFreq>
 800205c:	4602      	mov	r2, r0
 800205e:	4b05      	ldr	r3, [pc, #20]	@ (8002074 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	0b5b      	lsrs	r3, r3, #13
 8002064:	f003 0307 	and.w	r3, r3, #7
 8002068:	4903      	ldr	r1, [pc, #12]	@ (8002078 <HAL_RCC_GetPCLK2Freq+0x24>)
 800206a:	5ccb      	ldrb	r3, [r1, r3]
 800206c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002070:	4618      	mov	r0, r3
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40023800 	.word	0x40023800
 8002078:	08004590 	.word	0x08004590

0800207c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	220f      	movs	r2, #15
 800208a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800208c:	4b12      	ldr	r3, [pc, #72]	@ (80020d8 <HAL_RCC_GetClockConfig+0x5c>)
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f003 0203 	and.w	r2, r3, #3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002098:	4b0f      	ldr	r3, [pc, #60]	@ (80020d8 <HAL_RCC_GetClockConfig+0x5c>)
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80020a4:	4b0c      	ldr	r3, [pc, #48]	@ (80020d8 <HAL_RCC_GetClockConfig+0x5c>)
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80020b0:	4b09      	ldr	r3, [pc, #36]	@ (80020d8 <HAL_RCC_GetClockConfig+0x5c>)
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	08db      	lsrs	r3, r3, #3
 80020b6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80020be:	4b07      	ldr	r3, [pc, #28]	@ (80020dc <HAL_RCC_GetClockConfig+0x60>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0207 	and.w	r2, r3, #7
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	601a      	str	r2, [r3, #0]
}
 80020ca:	bf00      	nop
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	40023800 	.word	0x40023800
 80020dc:	40023c00 	.word	0x40023c00

080020e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d101      	bne.n	80020f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e041      	b.n	8002176 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d106      	bne.n	800210c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f000 f839 	bl	800217e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2202      	movs	r2, #2
 8002110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	3304      	adds	r3, #4
 800211c:	4619      	mov	r1, r3
 800211e:	4610      	mov	r0, r2
 8002120:	f000 f9c0 	bl	80024a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800217e:	b480      	push	{r7}
 8002180:	b083      	sub	sp, #12
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002186:	bf00      	nop
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
	...

08002194 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d001      	beq.n	80021ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e04e      	b.n	800224a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2202      	movs	r2, #2
 80021b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	68da      	ldr	r2, [r3, #12]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f042 0201 	orr.w	r2, r2, #1
 80021c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a23      	ldr	r2, [pc, #140]	@ (8002258 <HAL_TIM_Base_Start_IT+0xc4>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d022      	beq.n	8002214 <HAL_TIM_Base_Start_IT+0x80>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021d6:	d01d      	beq.n	8002214 <HAL_TIM_Base_Start_IT+0x80>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a1f      	ldr	r2, [pc, #124]	@ (800225c <HAL_TIM_Base_Start_IT+0xc8>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d018      	beq.n	8002214 <HAL_TIM_Base_Start_IT+0x80>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a1e      	ldr	r2, [pc, #120]	@ (8002260 <HAL_TIM_Base_Start_IT+0xcc>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d013      	beq.n	8002214 <HAL_TIM_Base_Start_IT+0x80>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a1c      	ldr	r2, [pc, #112]	@ (8002264 <HAL_TIM_Base_Start_IT+0xd0>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d00e      	beq.n	8002214 <HAL_TIM_Base_Start_IT+0x80>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a1b      	ldr	r2, [pc, #108]	@ (8002268 <HAL_TIM_Base_Start_IT+0xd4>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d009      	beq.n	8002214 <HAL_TIM_Base_Start_IT+0x80>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a19      	ldr	r2, [pc, #100]	@ (800226c <HAL_TIM_Base_Start_IT+0xd8>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d004      	beq.n	8002214 <HAL_TIM_Base_Start_IT+0x80>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a18      	ldr	r2, [pc, #96]	@ (8002270 <HAL_TIM_Base_Start_IT+0xdc>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d111      	bne.n	8002238 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2b06      	cmp	r3, #6
 8002224:	d010      	beq.n	8002248 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f042 0201 	orr.w	r2, r2, #1
 8002234:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002236:	e007      	b.n	8002248 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f042 0201 	orr.w	r2, r2, #1
 8002246:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3714      	adds	r7, #20
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	40010000 	.word	0x40010000
 800225c:	40000400 	.word	0x40000400
 8002260:	40000800 	.word	0x40000800
 8002264:	40000c00 	.word	0x40000c00
 8002268:	40010400 	.word	0x40010400
 800226c:	40014000 	.word	0x40014000
 8002270:	40001800 	.word	0x40001800

08002274 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d020      	beq.n	80022d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f003 0302 	and.w	r3, r3, #2
 800229c:	2b00      	cmp	r3, #0
 800229e:	d01b      	beq.n	80022d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f06f 0202 	mvn.w	r2, #2
 80022a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2201      	movs	r2, #1
 80022ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	f003 0303 	and.w	r3, r3, #3
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d003      	beq.n	80022c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f000 f8d2 	bl	8002468 <HAL_TIM_IC_CaptureCallback>
 80022c4:	e005      	b.n	80022d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f000 f8c4 	bl	8002454 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f000 f8d5 	bl	800247c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	f003 0304 	and.w	r3, r3, #4
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d020      	beq.n	8002324 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f003 0304 	and.w	r3, r3, #4
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d01b      	beq.n	8002324 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f06f 0204 	mvn.w	r2, #4
 80022f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2202      	movs	r2, #2
 80022fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 f8ac 	bl	8002468 <HAL_TIM_IC_CaptureCallback>
 8002310:	e005      	b.n	800231e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 f89e 	bl	8002454 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f000 f8af 	bl	800247c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	f003 0308 	and.w	r3, r3, #8
 800232a:	2b00      	cmp	r3, #0
 800232c:	d020      	beq.n	8002370 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f003 0308 	and.w	r3, r3, #8
 8002334:	2b00      	cmp	r3, #0
 8002336:	d01b      	beq.n	8002370 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f06f 0208 	mvn.w	r2, #8
 8002340:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2204      	movs	r2, #4
 8002346:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	f003 0303 	and.w	r3, r3, #3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d003      	beq.n	800235e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f000 f886 	bl	8002468 <HAL_TIM_IC_CaptureCallback>
 800235c:	e005      	b.n	800236a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 f878 	bl	8002454 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f000 f889 	bl	800247c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	f003 0310 	and.w	r3, r3, #16
 8002376:	2b00      	cmp	r3, #0
 8002378:	d020      	beq.n	80023bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	f003 0310 	and.w	r3, r3, #16
 8002380:	2b00      	cmp	r3, #0
 8002382:	d01b      	beq.n	80023bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f06f 0210 	mvn.w	r2, #16
 800238c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2208      	movs	r2, #8
 8002392:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	69db      	ldr	r3, [r3, #28]
 800239a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d003      	beq.n	80023aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f000 f860 	bl	8002468 <HAL_TIM_IC_CaptureCallback>
 80023a8:	e005      	b.n	80023b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f000 f852 	bl	8002454 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f000 f863 	bl	800247c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00c      	beq.n	80023e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f003 0301 	and.w	r3, r3, #1
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d007      	beq.n	80023e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f06f 0201 	mvn.w	r2, #1
 80023d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f7fe faba 	bl	8000954 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d00c      	beq.n	8002404 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d007      	beq.n	8002404 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80023fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 f906 	bl	8002610 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800240a:	2b00      	cmp	r3, #0
 800240c:	d00c      	beq.n	8002428 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002414:	2b00      	cmp	r3, #0
 8002416:	d007      	beq.n	8002428 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 f834 	bl	8002490 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	f003 0320 	and.w	r3, r3, #32
 800242e:	2b00      	cmp	r3, #0
 8002430:	d00c      	beq.n	800244c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f003 0320 	and.w	r3, r3, #32
 8002438:	2b00      	cmp	r3, #0
 800243a:	d007      	beq.n	800244c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f06f 0220 	mvn.w	r2, #32
 8002444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 f8d8 	bl	80025fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800244c:	bf00      	nop
 800244e:	3710      	adds	r7, #16
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002470:	bf00      	nop
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4a46      	ldr	r2, [pc, #280]	@ (80025d0 <TIM_Base_SetConfig+0x12c>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d013      	beq.n	80024e4 <TIM_Base_SetConfig+0x40>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024c2:	d00f      	beq.n	80024e4 <TIM_Base_SetConfig+0x40>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a43      	ldr	r2, [pc, #268]	@ (80025d4 <TIM_Base_SetConfig+0x130>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d00b      	beq.n	80024e4 <TIM_Base_SetConfig+0x40>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a42      	ldr	r2, [pc, #264]	@ (80025d8 <TIM_Base_SetConfig+0x134>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d007      	beq.n	80024e4 <TIM_Base_SetConfig+0x40>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4a41      	ldr	r2, [pc, #260]	@ (80025dc <TIM_Base_SetConfig+0x138>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d003      	beq.n	80024e4 <TIM_Base_SetConfig+0x40>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4a40      	ldr	r2, [pc, #256]	@ (80025e0 <TIM_Base_SetConfig+0x13c>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d108      	bne.n	80024f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	68fa      	ldr	r2, [r7, #12]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a35      	ldr	r2, [pc, #212]	@ (80025d0 <TIM_Base_SetConfig+0x12c>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d02b      	beq.n	8002556 <TIM_Base_SetConfig+0xb2>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002504:	d027      	beq.n	8002556 <TIM_Base_SetConfig+0xb2>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a32      	ldr	r2, [pc, #200]	@ (80025d4 <TIM_Base_SetConfig+0x130>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d023      	beq.n	8002556 <TIM_Base_SetConfig+0xb2>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a31      	ldr	r2, [pc, #196]	@ (80025d8 <TIM_Base_SetConfig+0x134>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d01f      	beq.n	8002556 <TIM_Base_SetConfig+0xb2>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a30      	ldr	r2, [pc, #192]	@ (80025dc <TIM_Base_SetConfig+0x138>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d01b      	beq.n	8002556 <TIM_Base_SetConfig+0xb2>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a2f      	ldr	r2, [pc, #188]	@ (80025e0 <TIM_Base_SetConfig+0x13c>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d017      	beq.n	8002556 <TIM_Base_SetConfig+0xb2>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a2e      	ldr	r2, [pc, #184]	@ (80025e4 <TIM_Base_SetConfig+0x140>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d013      	beq.n	8002556 <TIM_Base_SetConfig+0xb2>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a2d      	ldr	r2, [pc, #180]	@ (80025e8 <TIM_Base_SetConfig+0x144>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d00f      	beq.n	8002556 <TIM_Base_SetConfig+0xb2>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a2c      	ldr	r2, [pc, #176]	@ (80025ec <TIM_Base_SetConfig+0x148>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d00b      	beq.n	8002556 <TIM_Base_SetConfig+0xb2>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a2b      	ldr	r2, [pc, #172]	@ (80025f0 <TIM_Base_SetConfig+0x14c>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d007      	beq.n	8002556 <TIM_Base_SetConfig+0xb2>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a2a      	ldr	r2, [pc, #168]	@ (80025f4 <TIM_Base_SetConfig+0x150>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d003      	beq.n	8002556 <TIM_Base_SetConfig+0xb2>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a29      	ldr	r2, [pc, #164]	@ (80025f8 <TIM_Base_SetConfig+0x154>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d108      	bne.n	8002568 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800255c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	4313      	orrs	r3, r2
 8002566:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	4313      	orrs	r3, r2
 8002574:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	689a      	ldr	r2, [r3, #8]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	4a10      	ldr	r2, [pc, #64]	@ (80025d0 <TIM_Base_SetConfig+0x12c>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d003      	beq.n	800259c <TIM_Base_SetConfig+0xf8>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4a12      	ldr	r2, [pc, #72]	@ (80025e0 <TIM_Base_SetConfig+0x13c>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d103      	bne.n	80025a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	691a      	ldr	r2, [r3, #16]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d105      	bne.n	80025c2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	f023 0201 	bic.w	r2, r3, #1
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	611a      	str	r2, [r3, #16]
  }
}
 80025c2:	bf00      	nop
 80025c4:	3714      	adds	r7, #20
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	40010000 	.word	0x40010000
 80025d4:	40000400 	.word	0x40000400
 80025d8:	40000800 	.word	0x40000800
 80025dc:	40000c00 	.word	0x40000c00
 80025e0:	40010400 	.word	0x40010400
 80025e4:	40014000 	.word	0x40014000
 80025e8:	40014400 	.word	0x40014400
 80025ec:	40014800 	.word	0x40014800
 80025f0:	40001800 	.word	0x40001800
 80025f4:	40001c00 	.word	0x40001c00
 80025f8:	40002000 	.word	0x40002000

080025fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002604:	bf00      	nop
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e042      	b.n	80026bc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d106      	bne.n	8002650 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f7fe fa0a 	bl	8000a64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2224      	movs	r2, #36	@ 0x24
 8002654:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	68da      	ldr	r2, [r3, #12]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002666:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f000 f82b 	bl	80026c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	691a      	ldr	r2, [r3, #16]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800267c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	695a      	ldr	r2, [r3, #20]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800268c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68da      	ldr	r2, [r3, #12]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800269c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2220      	movs	r2, #32
 80026a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2220      	movs	r2, #32
 80026b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3708      	adds	r7, #8
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026c8:	b0c0      	sub	sp, #256	@ 0x100
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	691b      	ldr	r3, [r3, #16]
 80026d8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80026dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026e0:	68d9      	ldr	r1, [r3, #12]
 80026e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	ea40 0301 	orr.w	r3, r0, r1
 80026ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	431a      	orrs	r2, r3
 80026fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	431a      	orrs	r2, r3
 8002704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	4313      	orrs	r3, r2
 800270c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800271c:	f021 010c 	bic.w	r1, r1, #12
 8002720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800272a:	430b      	orrs	r3, r1
 800272c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800272e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800273a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800273e:	6999      	ldr	r1, [r3, #24]
 8002740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	ea40 0301 	orr.w	r3, r0, r1
 800274a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800274c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	4b8f      	ldr	r3, [pc, #572]	@ (8002990 <UART_SetConfig+0x2cc>)
 8002754:	429a      	cmp	r2, r3
 8002756:	d005      	beq.n	8002764 <UART_SetConfig+0xa0>
 8002758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	4b8d      	ldr	r3, [pc, #564]	@ (8002994 <UART_SetConfig+0x2d0>)
 8002760:	429a      	cmp	r2, r3
 8002762:	d104      	bne.n	800276e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002764:	f7ff fc76 	bl	8002054 <HAL_RCC_GetPCLK2Freq>
 8002768:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800276c:	e003      	b.n	8002776 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800276e:	f7ff fc5d 	bl	800202c <HAL_RCC_GetPCLK1Freq>
 8002772:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002776:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800277a:	69db      	ldr	r3, [r3, #28]
 800277c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002780:	f040 810c 	bne.w	800299c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002784:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002788:	2200      	movs	r2, #0
 800278a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800278e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002792:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002796:	4622      	mov	r2, r4
 8002798:	462b      	mov	r3, r5
 800279a:	1891      	adds	r1, r2, r2
 800279c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800279e:	415b      	adcs	r3, r3
 80027a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80027a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80027a6:	4621      	mov	r1, r4
 80027a8:	eb12 0801 	adds.w	r8, r2, r1
 80027ac:	4629      	mov	r1, r5
 80027ae:	eb43 0901 	adc.w	r9, r3, r1
 80027b2:	f04f 0200 	mov.w	r2, #0
 80027b6:	f04f 0300 	mov.w	r3, #0
 80027ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027c6:	4690      	mov	r8, r2
 80027c8:	4699      	mov	r9, r3
 80027ca:	4623      	mov	r3, r4
 80027cc:	eb18 0303 	adds.w	r3, r8, r3
 80027d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80027d4:	462b      	mov	r3, r5
 80027d6:	eb49 0303 	adc.w	r3, r9, r3
 80027da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80027de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80027ea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80027ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80027f2:	460b      	mov	r3, r1
 80027f4:	18db      	adds	r3, r3, r3
 80027f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80027f8:	4613      	mov	r3, r2
 80027fa:	eb42 0303 	adc.w	r3, r2, r3
 80027fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8002800:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002804:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002808:	f7fd fce2 	bl	80001d0 <__aeabi_uldivmod>
 800280c:	4602      	mov	r2, r0
 800280e:	460b      	mov	r3, r1
 8002810:	4b61      	ldr	r3, [pc, #388]	@ (8002998 <UART_SetConfig+0x2d4>)
 8002812:	fba3 2302 	umull	r2, r3, r3, r2
 8002816:	095b      	lsrs	r3, r3, #5
 8002818:	011c      	lsls	r4, r3, #4
 800281a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800281e:	2200      	movs	r2, #0
 8002820:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002824:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002828:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800282c:	4642      	mov	r2, r8
 800282e:	464b      	mov	r3, r9
 8002830:	1891      	adds	r1, r2, r2
 8002832:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002834:	415b      	adcs	r3, r3
 8002836:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002838:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800283c:	4641      	mov	r1, r8
 800283e:	eb12 0a01 	adds.w	sl, r2, r1
 8002842:	4649      	mov	r1, r9
 8002844:	eb43 0b01 	adc.w	fp, r3, r1
 8002848:	f04f 0200 	mov.w	r2, #0
 800284c:	f04f 0300 	mov.w	r3, #0
 8002850:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002854:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002858:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800285c:	4692      	mov	sl, r2
 800285e:	469b      	mov	fp, r3
 8002860:	4643      	mov	r3, r8
 8002862:	eb1a 0303 	adds.w	r3, sl, r3
 8002866:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800286a:	464b      	mov	r3, r9
 800286c:	eb4b 0303 	adc.w	r3, fp, r3
 8002870:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002880:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002884:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002888:	460b      	mov	r3, r1
 800288a:	18db      	adds	r3, r3, r3
 800288c:	643b      	str	r3, [r7, #64]	@ 0x40
 800288e:	4613      	mov	r3, r2
 8002890:	eb42 0303 	adc.w	r3, r2, r3
 8002894:	647b      	str	r3, [r7, #68]	@ 0x44
 8002896:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800289a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800289e:	f7fd fc97 	bl	80001d0 <__aeabi_uldivmod>
 80028a2:	4602      	mov	r2, r0
 80028a4:	460b      	mov	r3, r1
 80028a6:	4611      	mov	r1, r2
 80028a8:	4b3b      	ldr	r3, [pc, #236]	@ (8002998 <UART_SetConfig+0x2d4>)
 80028aa:	fba3 2301 	umull	r2, r3, r3, r1
 80028ae:	095b      	lsrs	r3, r3, #5
 80028b0:	2264      	movs	r2, #100	@ 0x64
 80028b2:	fb02 f303 	mul.w	r3, r2, r3
 80028b6:	1acb      	subs	r3, r1, r3
 80028b8:	00db      	lsls	r3, r3, #3
 80028ba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80028be:	4b36      	ldr	r3, [pc, #216]	@ (8002998 <UART_SetConfig+0x2d4>)
 80028c0:	fba3 2302 	umull	r2, r3, r3, r2
 80028c4:	095b      	lsrs	r3, r3, #5
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80028cc:	441c      	add	r4, r3
 80028ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028d2:	2200      	movs	r2, #0
 80028d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80028d8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80028dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80028e0:	4642      	mov	r2, r8
 80028e2:	464b      	mov	r3, r9
 80028e4:	1891      	adds	r1, r2, r2
 80028e6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80028e8:	415b      	adcs	r3, r3
 80028ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80028f0:	4641      	mov	r1, r8
 80028f2:	1851      	adds	r1, r2, r1
 80028f4:	6339      	str	r1, [r7, #48]	@ 0x30
 80028f6:	4649      	mov	r1, r9
 80028f8:	414b      	adcs	r3, r1
 80028fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80028fc:	f04f 0200 	mov.w	r2, #0
 8002900:	f04f 0300 	mov.w	r3, #0
 8002904:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002908:	4659      	mov	r1, fp
 800290a:	00cb      	lsls	r3, r1, #3
 800290c:	4651      	mov	r1, sl
 800290e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002912:	4651      	mov	r1, sl
 8002914:	00ca      	lsls	r2, r1, #3
 8002916:	4610      	mov	r0, r2
 8002918:	4619      	mov	r1, r3
 800291a:	4603      	mov	r3, r0
 800291c:	4642      	mov	r2, r8
 800291e:	189b      	adds	r3, r3, r2
 8002920:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002924:	464b      	mov	r3, r9
 8002926:	460a      	mov	r2, r1
 8002928:	eb42 0303 	adc.w	r3, r2, r3
 800292c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800293c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002940:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002944:	460b      	mov	r3, r1
 8002946:	18db      	adds	r3, r3, r3
 8002948:	62bb      	str	r3, [r7, #40]	@ 0x28
 800294a:	4613      	mov	r3, r2
 800294c:	eb42 0303 	adc.w	r3, r2, r3
 8002950:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002952:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002956:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800295a:	f7fd fc39 	bl	80001d0 <__aeabi_uldivmod>
 800295e:	4602      	mov	r2, r0
 8002960:	460b      	mov	r3, r1
 8002962:	4b0d      	ldr	r3, [pc, #52]	@ (8002998 <UART_SetConfig+0x2d4>)
 8002964:	fba3 1302 	umull	r1, r3, r3, r2
 8002968:	095b      	lsrs	r3, r3, #5
 800296a:	2164      	movs	r1, #100	@ 0x64
 800296c:	fb01 f303 	mul.w	r3, r1, r3
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	3332      	adds	r3, #50	@ 0x32
 8002976:	4a08      	ldr	r2, [pc, #32]	@ (8002998 <UART_SetConfig+0x2d4>)
 8002978:	fba2 2303 	umull	r2, r3, r2, r3
 800297c:	095b      	lsrs	r3, r3, #5
 800297e:	f003 0207 	and.w	r2, r3, #7
 8002982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4422      	add	r2, r4
 800298a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800298c:	e106      	b.n	8002b9c <UART_SetConfig+0x4d8>
 800298e:	bf00      	nop
 8002990:	40011000 	.word	0x40011000
 8002994:	40011400 	.word	0x40011400
 8002998:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800299c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029a0:	2200      	movs	r2, #0
 80029a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80029a6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80029aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80029ae:	4642      	mov	r2, r8
 80029b0:	464b      	mov	r3, r9
 80029b2:	1891      	adds	r1, r2, r2
 80029b4:	6239      	str	r1, [r7, #32]
 80029b6:	415b      	adcs	r3, r3
 80029b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80029ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80029be:	4641      	mov	r1, r8
 80029c0:	1854      	adds	r4, r2, r1
 80029c2:	4649      	mov	r1, r9
 80029c4:	eb43 0501 	adc.w	r5, r3, r1
 80029c8:	f04f 0200 	mov.w	r2, #0
 80029cc:	f04f 0300 	mov.w	r3, #0
 80029d0:	00eb      	lsls	r3, r5, #3
 80029d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029d6:	00e2      	lsls	r2, r4, #3
 80029d8:	4614      	mov	r4, r2
 80029da:	461d      	mov	r5, r3
 80029dc:	4643      	mov	r3, r8
 80029de:	18e3      	adds	r3, r4, r3
 80029e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80029e4:	464b      	mov	r3, r9
 80029e6:	eb45 0303 	adc.w	r3, r5, r3
 80029ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80029ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80029fa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80029fe:	f04f 0200 	mov.w	r2, #0
 8002a02:	f04f 0300 	mov.w	r3, #0
 8002a06:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002a0a:	4629      	mov	r1, r5
 8002a0c:	008b      	lsls	r3, r1, #2
 8002a0e:	4621      	mov	r1, r4
 8002a10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a14:	4621      	mov	r1, r4
 8002a16:	008a      	lsls	r2, r1, #2
 8002a18:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002a1c:	f7fd fbd8 	bl	80001d0 <__aeabi_uldivmod>
 8002a20:	4602      	mov	r2, r0
 8002a22:	460b      	mov	r3, r1
 8002a24:	4b60      	ldr	r3, [pc, #384]	@ (8002ba8 <UART_SetConfig+0x4e4>)
 8002a26:	fba3 2302 	umull	r2, r3, r3, r2
 8002a2a:	095b      	lsrs	r3, r3, #5
 8002a2c:	011c      	lsls	r4, r3, #4
 8002a2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a32:	2200      	movs	r2, #0
 8002a34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002a38:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002a3c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002a40:	4642      	mov	r2, r8
 8002a42:	464b      	mov	r3, r9
 8002a44:	1891      	adds	r1, r2, r2
 8002a46:	61b9      	str	r1, [r7, #24]
 8002a48:	415b      	adcs	r3, r3
 8002a4a:	61fb      	str	r3, [r7, #28]
 8002a4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a50:	4641      	mov	r1, r8
 8002a52:	1851      	adds	r1, r2, r1
 8002a54:	6139      	str	r1, [r7, #16]
 8002a56:	4649      	mov	r1, r9
 8002a58:	414b      	adcs	r3, r1
 8002a5a:	617b      	str	r3, [r7, #20]
 8002a5c:	f04f 0200 	mov.w	r2, #0
 8002a60:	f04f 0300 	mov.w	r3, #0
 8002a64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a68:	4659      	mov	r1, fp
 8002a6a:	00cb      	lsls	r3, r1, #3
 8002a6c:	4651      	mov	r1, sl
 8002a6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a72:	4651      	mov	r1, sl
 8002a74:	00ca      	lsls	r2, r1, #3
 8002a76:	4610      	mov	r0, r2
 8002a78:	4619      	mov	r1, r3
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	4642      	mov	r2, r8
 8002a7e:	189b      	adds	r3, r3, r2
 8002a80:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002a84:	464b      	mov	r3, r9
 8002a86:	460a      	mov	r2, r1
 8002a88:	eb42 0303 	adc.w	r3, r2, r3
 8002a8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002a9a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002a9c:	f04f 0200 	mov.w	r2, #0
 8002aa0:	f04f 0300 	mov.w	r3, #0
 8002aa4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002aa8:	4649      	mov	r1, r9
 8002aaa:	008b      	lsls	r3, r1, #2
 8002aac:	4641      	mov	r1, r8
 8002aae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ab2:	4641      	mov	r1, r8
 8002ab4:	008a      	lsls	r2, r1, #2
 8002ab6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002aba:	f7fd fb89 	bl	80001d0 <__aeabi_uldivmod>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	4611      	mov	r1, r2
 8002ac4:	4b38      	ldr	r3, [pc, #224]	@ (8002ba8 <UART_SetConfig+0x4e4>)
 8002ac6:	fba3 2301 	umull	r2, r3, r3, r1
 8002aca:	095b      	lsrs	r3, r3, #5
 8002acc:	2264      	movs	r2, #100	@ 0x64
 8002ace:	fb02 f303 	mul.w	r3, r2, r3
 8002ad2:	1acb      	subs	r3, r1, r3
 8002ad4:	011b      	lsls	r3, r3, #4
 8002ad6:	3332      	adds	r3, #50	@ 0x32
 8002ad8:	4a33      	ldr	r2, [pc, #204]	@ (8002ba8 <UART_SetConfig+0x4e4>)
 8002ada:	fba2 2303 	umull	r2, r3, r2, r3
 8002ade:	095b      	lsrs	r3, r3, #5
 8002ae0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ae4:	441c      	add	r4, r3
 8002ae6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002aea:	2200      	movs	r2, #0
 8002aec:	673b      	str	r3, [r7, #112]	@ 0x70
 8002aee:	677a      	str	r2, [r7, #116]	@ 0x74
 8002af0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002af4:	4642      	mov	r2, r8
 8002af6:	464b      	mov	r3, r9
 8002af8:	1891      	adds	r1, r2, r2
 8002afa:	60b9      	str	r1, [r7, #8]
 8002afc:	415b      	adcs	r3, r3
 8002afe:	60fb      	str	r3, [r7, #12]
 8002b00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b04:	4641      	mov	r1, r8
 8002b06:	1851      	adds	r1, r2, r1
 8002b08:	6039      	str	r1, [r7, #0]
 8002b0a:	4649      	mov	r1, r9
 8002b0c:	414b      	adcs	r3, r1
 8002b0e:	607b      	str	r3, [r7, #4]
 8002b10:	f04f 0200 	mov.w	r2, #0
 8002b14:	f04f 0300 	mov.w	r3, #0
 8002b18:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002b1c:	4659      	mov	r1, fp
 8002b1e:	00cb      	lsls	r3, r1, #3
 8002b20:	4651      	mov	r1, sl
 8002b22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b26:	4651      	mov	r1, sl
 8002b28:	00ca      	lsls	r2, r1, #3
 8002b2a:	4610      	mov	r0, r2
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4603      	mov	r3, r0
 8002b30:	4642      	mov	r2, r8
 8002b32:	189b      	adds	r3, r3, r2
 8002b34:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002b36:	464b      	mov	r3, r9
 8002b38:	460a      	mov	r2, r1
 8002b3a:	eb42 0303 	adc.w	r3, r2, r3
 8002b3e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	663b      	str	r3, [r7, #96]	@ 0x60
 8002b4a:	667a      	str	r2, [r7, #100]	@ 0x64
 8002b4c:	f04f 0200 	mov.w	r2, #0
 8002b50:	f04f 0300 	mov.w	r3, #0
 8002b54:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002b58:	4649      	mov	r1, r9
 8002b5a:	008b      	lsls	r3, r1, #2
 8002b5c:	4641      	mov	r1, r8
 8002b5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b62:	4641      	mov	r1, r8
 8002b64:	008a      	lsls	r2, r1, #2
 8002b66:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002b6a:	f7fd fb31 	bl	80001d0 <__aeabi_uldivmod>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	460b      	mov	r3, r1
 8002b72:	4b0d      	ldr	r3, [pc, #52]	@ (8002ba8 <UART_SetConfig+0x4e4>)
 8002b74:	fba3 1302 	umull	r1, r3, r3, r2
 8002b78:	095b      	lsrs	r3, r3, #5
 8002b7a:	2164      	movs	r1, #100	@ 0x64
 8002b7c:	fb01 f303 	mul.w	r3, r1, r3
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	011b      	lsls	r3, r3, #4
 8002b84:	3332      	adds	r3, #50	@ 0x32
 8002b86:	4a08      	ldr	r2, [pc, #32]	@ (8002ba8 <UART_SetConfig+0x4e4>)
 8002b88:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8c:	095b      	lsrs	r3, r3, #5
 8002b8e:	f003 020f 	and.w	r2, r3, #15
 8002b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4422      	add	r2, r4
 8002b9a:	609a      	str	r2, [r3, #8]
}
 8002b9c:	bf00      	nop
 8002b9e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ba8:	51eb851f 	.word	0x51eb851f

08002bac <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002bba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bbe:	2b84      	cmp	r3, #132	@ 0x84
 8002bc0:	d005      	beq.n	8002bce <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002bc2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	4413      	add	r3, r2
 8002bca:	3303      	adds	r3, #3
 8002bcc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002bce:	68fb      	ldr	r3, [r7, #12]
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3714      	adds	r7, #20
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002be0:	f000 fbc2 	bl	8003368 <vTaskStartScheduler>
  
  return osOK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	bd80      	pop	{r7, pc}

08002bea <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002bea:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bec:	b089      	sub	sp, #36	@ 0x24
 8002bee:	af04      	add	r7, sp, #16
 8002bf0:	6078      	str	r0, [r7, #4]
 8002bf2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	695b      	ldr	r3, [r3, #20]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d020      	beq.n	8002c3e <osThreadCreate+0x54>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d01c      	beq.n	8002c3e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685c      	ldr	r4, [r3, #4]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	691e      	ldr	r6, [r3, #16]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7ff ffc8 	bl	8002bac <makeFreeRtosPriority>
 8002c1c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002c26:	9202      	str	r2, [sp, #8]
 8002c28:	9301      	str	r3, [sp, #4]
 8002c2a:	9100      	str	r1, [sp, #0]
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	4632      	mov	r2, r6
 8002c30:	4629      	mov	r1, r5
 8002c32:	4620      	mov	r0, r4
 8002c34:	f000 f9b2 	bl	8002f9c <xTaskCreateStatic>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	60fb      	str	r3, [r7, #12]
 8002c3c:	e01c      	b.n	8002c78 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685c      	ldr	r4, [r3, #4]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002c4a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff ffaa 	bl	8002bac <makeFreeRtosPriority>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	f107 030c 	add.w	r3, r7, #12
 8002c5e:	9301      	str	r3, [sp, #4]
 8002c60:	9200      	str	r2, [sp, #0]
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	4632      	mov	r2, r6
 8002c66:	4629      	mov	r1, r5
 8002c68:	4620      	mov	r0, r4
 8002c6a:	f000 f9f7 	bl	800305c <xTaskCreate>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d001      	beq.n	8002c78 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002c74:	2300      	movs	r3, #0
 8002c76:	e000      	b.n	8002c7a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002c78:	68fb      	ldr	r3, [r7, #12]
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3714      	adds	r7, #20
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c82 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b084      	sub	sp, #16
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <osDelay+0x16>
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	e000      	b.n	8002c9a <osDelay+0x18>
 8002c98:	2301      	movs	r3, #1
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f000 fb2e 	bl	80032fc <vTaskDelay>
  
  return osOK;
 8002ca0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3710      	adds	r7, #16
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002caa:	b480      	push	{r7}
 8002cac:	b083      	sub	sp, #12
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f103 0208 	add.w	r2, r3, #8
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002cc2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f103 0208 	add.w	r2, r3, #8
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f103 0208 	add.w	r2, r3, #8
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002cde:	bf00      	nop
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr

08002cea <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002cea:	b480      	push	{r7}
 8002cec:	b083      	sub	sp, #12
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002cf8:	bf00      	nop
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d04:	b480      	push	{r7}
 8002d06:	b085      	sub	sp, #20
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	689a      	ldr	r2, [r3, #8]
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	683a      	ldr	r2, [r7, #0]
 8002d28:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	683a      	ldr	r2, [r7, #0]
 8002d2e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	1c5a      	adds	r2, r3, #1
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	601a      	str	r2, [r3, #0]
}
 8002d40:	bf00      	nop
 8002d42:	3714      	adds	r7, #20
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b085      	sub	sp, #20
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002d62:	d103      	bne.n	8002d6c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	691b      	ldr	r3, [r3, #16]
 8002d68:	60fb      	str	r3, [r7, #12]
 8002d6a:	e00c      	b.n	8002d86 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	3308      	adds	r3, #8
 8002d70:	60fb      	str	r3, [r7, #12]
 8002d72:	e002      	b.n	8002d7a <vListInsert+0x2e>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	60fb      	str	r3, [r7, #12]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	68ba      	ldr	r2, [r7, #8]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d2f6      	bcs.n	8002d74 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	685a      	ldr	r2, [r3, #4]
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	683a      	ldr	r2, [r7, #0]
 8002d94:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	1c5a      	adds	r2, r3, #1
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	601a      	str	r2, [r3, #0]
}
 8002db2:	bf00      	nop
 8002db4:	3714      	adds	r7, #20
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr

08002dbe <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	b085      	sub	sp, #20
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	6892      	ldr	r2, [r2, #8]
 8002dd4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	6852      	ldr	r2, [r2, #4]
 8002dde:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d103      	bne.n	8002df2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	689a      	ldr	r2, [r3, #8]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	1e5a      	subs	r2, r3, #1
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3714      	adds	r7, #20
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
	...

08002e14 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d10b      	bne.n	8002e40 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002e28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e2c:	f383 8811 	msr	BASEPRI, r3
 8002e30:	f3bf 8f6f 	isb	sy
 8002e34:	f3bf 8f4f 	dsb	sy
 8002e38:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002e3a:	bf00      	nop
 8002e3c:	bf00      	nop
 8002e3e:	e7fd      	b.n	8002e3c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002e40:	f000 ff9a 	bl	8003d78 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e4c:	68f9      	ldr	r1, [r7, #12]
 8002e4e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002e50:	fb01 f303 	mul.w	r3, r1, r3
 8002e54:	441a      	add	r2, r3
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e70:	3b01      	subs	r3, #1
 8002e72:	68f9      	ldr	r1, [r7, #12]
 8002e74:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002e76:	fb01 f303 	mul.w	r3, r1, r3
 8002e7a:	441a      	add	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	22ff      	movs	r2, #255	@ 0xff
 8002e84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	22ff      	movs	r2, #255	@ 0xff
 8002e8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d114      	bne.n	8002ec0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d01a      	beq.n	8002ed4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	3310      	adds	r3, #16
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f000 fc94 	bl	80037d0 <xTaskRemoveFromEventList>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d012      	beq.n	8002ed4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002eae:	4b0d      	ldr	r3, [pc, #52]	@ (8002ee4 <xQueueGenericReset+0xd0>)
 8002eb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002eb4:	601a      	str	r2, [r3, #0]
 8002eb6:	f3bf 8f4f 	dsb	sy
 8002eba:	f3bf 8f6f 	isb	sy
 8002ebe:	e009      	b.n	8002ed4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	3310      	adds	r3, #16
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7ff fef0 	bl	8002caa <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	3324      	adds	r3, #36	@ 0x24
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7ff feeb 	bl	8002caa <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002ed4:	f000 ff82 	bl	8003ddc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002ed8:	2301      	movs	r3, #1
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3710      	adds	r7, #16
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	e000ed04 	.word	0xe000ed04

08002ee8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b08a      	sub	sp, #40	@ 0x28
 8002eec:	af02      	add	r7, sp, #8
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d10b      	bne.n	8002f14 <xQueueGenericCreate+0x2c>
	__asm volatile
 8002efc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f00:	f383 8811 	msr	BASEPRI, r3
 8002f04:	f3bf 8f6f 	isb	sy
 8002f08:	f3bf 8f4f 	dsb	sy
 8002f0c:	613b      	str	r3, [r7, #16]
}
 8002f0e:	bf00      	nop
 8002f10:	bf00      	nop
 8002f12:	e7fd      	b.n	8002f10 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	68ba      	ldr	r2, [r7, #8]
 8002f18:	fb02 f303 	mul.w	r3, r2, r3
 8002f1c:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	3348      	adds	r3, #72	@ 0x48
 8002f22:	4618      	mov	r0, r3
 8002f24:	f001 f808 	bl	8003f38 <pvPortMalloc>
 8002f28:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d011      	beq.n	8002f54 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	3348      	adds	r3, #72	@ 0x48
 8002f38:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002f42:	79fa      	ldrb	r2, [r7, #7]
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	9300      	str	r3, [sp, #0]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	697a      	ldr	r2, [r7, #20]
 8002f4c:	68b9      	ldr	r1, [r7, #8]
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	f000 f805 	bl	8002f5e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002f54:	69bb      	ldr	r3, [r7, #24]
	}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3720      	adds	r7, #32
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b084      	sub	sp, #16
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	60f8      	str	r0, [r7, #12]
 8002f66:	60b9      	str	r1, [r7, #8]
 8002f68:	607a      	str	r2, [r7, #4]
 8002f6a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d103      	bne.n	8002f7a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	601a      	str	r2, [r3, #0]
 8002f78:	e002      	b.n	8002f80 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	68ba      	ldr	r2, [r7, #8]
 8002f8a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	69b8      	ldr	r0, [r7, #24]
 8002f90:	f7ff ff40 	bl	8002e14 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002f94:	bf00      	nop
 8002f96:	3710      	adds	r7, #16
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b08e      	sub	sp, #56	@ 0x38
 8002fa0:	af04      	add	r7, sp, #16
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	607a      	str	r2, [r7, #4]
 8002fa8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002faa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d10b      	bne.n	8002fc8 <xTaskCreateStatic+0x2c>
	__asm volatile
 8002fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fb4:	f383 8811 	msr	BASEPRI, r3
 8002fb8:	f3bf 8f6f 	isb	sy
 8002fbc:	f3bf 8f4f 	dsb	sy
 8002fc0:	623b      	str	r3, [r7, #32]
}
 8002fc2:	bf00      	nop
 8002fc4:	bf00      	nop
 8002fc6:	e7fd      	b.n	8002fc4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002fc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d10b      	bne.n	8002fe6 <xTaskCreateStatic+0x4a>
	__asm volatile
 8002fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fd2:	f383 8811 	msr	BASEPRI, r3
 8002fd6:	f3bf 8f6f 	isb	sy
 8002fda:	f3bf 8f4f 	dsb	sy
 8002fde:	61fb      	str	r3, [r7, #28]
}
 8002fe0:	bf00      	nop
 8002fe2:	bf00      	nop
 8002fe4:	e7fd      	b.n	8002fe2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002fe6:	23a0      	movs	r3, #160	@ 0xa0
 8002fe8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	2ba0      	cmp	r3, #160	@ 0xa0
 8002fee:	d00b      	beq.n	8003008 <xTaskCreateStatic+0x6c>
	__asm volatile
 8002ff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ff4:	f383 8811 	msr	BASEPRI, r3
 8002ff8:	f3bf 8f6f 	isb	sy
 8002ffc:	f3bf 8f4f 	dsb	sy
 8003000:	61bb      	str	r3, [r7, #24]
}
 8003002:	bf00      	nop
 8003004:	bf00      	nop
 8003006:	e7fd      	b.n	8003004 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003008:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800300a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800300c:	2b00      	cmp	r3, #0
 800300e:	d01e      	beq.n	800304e <xTaskCreateStatic+0xb2>
 8003010:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003012:	2b00      	cmp	r3, #0
 8003014:	d01b      	beq.n	800304e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003018:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800301a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800301c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800301e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003022:	2202      	movs	r2, #2
 8003024:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003028:	2300      	movs	r3, #0
 800302a:	9303      	str	r3, [sp, #12]
 800302c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800302e:	9302      	str	r3, [sp, #8]
 8003030:	f107 0314 	add.w	r3, r7, #20
 8003034:	9301      	str	r3, [sp, #4]
 8003036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003038:	9300      	str	r3, [sp, #0]
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	68b9      	ldr	r1, [r7, #8]
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	f000 f851 	bl	80030e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003046:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003048:	f000 f8ee 	bl	8003228 <prvAddNewTaskToReadyList>
 800304c:	e001      	b.n	8003052 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800304e:	2300      	movs	r3, #0
 8003050:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003052:	697b      	ldr	r3, [r7, #20]
	}
 8003054:	4618      	mov	r0, r3
 8003056:	3728      	adds	r7, #40	@ 0x28
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800305c:	b580      	push	{r7, lr}
 800305e:	b08c      	sub	sp, #48	@ 0x30
 8003060:	af04      	add	r7, sp, #16
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	603b      	str	r3, [r7, #0]
 8003068:	4613      	mov	r3, r2
 800306a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800306c:	88fb      	ldrh	r3, [r7, #6]
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	4618      	mov	r0, r3
 8003072:	f000 ff61 	bl	8003f38 <pvPortMalloc>
 8003076:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d00e      	beq.n	800309c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800307e:	20a0      	movs	r0, #160	@ 0xa0
 8003080:	f000 ff5a 	bl	8003f38 <pvPortMalloc>
 8003084:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d003      	beq.n	8003094 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	697a      	ldr	r2, [r7, #20]
 8003090:	631a      	str	r2, [r3, #48]	@ 0x30
 8003092:	e005      	b.n	80030a0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003094:	6978      	ldr	r0, [r7, #20]
 8003096:	f001 f81d 	bl	80040d4 <vPortFree>
 800309a:	e001      	b.n	80030a0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800309c:	2300      	movs	r3, #0
 800309e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d017      	beq.n	80030d6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80030ae:	88fa      	ldrh	r2, [r7, #6]
 80030b0:	2300      	movs	r3, #0
 80030b2:	9303      	str	r3, [sp, #12]
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	9302      	str	r3, [sp, #8]
 80030b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030ba:	9301      	str	r3, [sp, #4]
 80030bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030be:	9300      	str	r3, [sp, #0]
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	68b9      	ldr	r1, [r7, #8]
 80030c4:	68f8      	ldr	r0, [r7, #12]
 80030c6:	f000 f80f 	bl	80030e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80030ca:	69f8      	ldr	r0, [r7, #28]
 80030cc:	f000 f8ac 	bl	8003228 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80030d0:	2301      	movs	r3, #1
 80030d2:	61bb      	str	r3, [r7, #24]
 80030d4:	e002      	b.n	80030dc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80030d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80030da:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80030dc:	69bb      	ldr	r3, [r7, #24]
	}
 80030de:	4618      	mov	r0, r3
 80030e0:	3720      	adds	r7, #32
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
	...

080030e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b088      	sub	sp, #32
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]
 80030f4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80030f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003100:	3b01      	subs	r3, #1
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	4413      	add	r3, r2
 8003106:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	f023 0307 	bic.w	r3, r3, #7
 800310e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	f003 0307 	and.w	r3, r3, #7
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00b      	beq.n	8003132 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800311a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800311e:	f383 8811 	msr	BASEPRI, r3
 8003122:	f3bf 8f6f 	isb	sy
 8003126:	f3bf 8f4f 	dsb	sy
 800312a:	617b      	str	r3, [r7, #20]
}
 800312c:	bf00      	nop
 800312e:	bf00      	nop
 8003130:	e7fd      	b.n	800312e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d01f      	beq.n	8003178 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003138:	2300      	movs	r3, #0
 800313a:	61fb      	str	r3, [r7, #28]
 800313c:	e012      	b.n	8003164 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800313e:	68ba      	ldr	r2, [r7, #8]
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	4413      	add	r3, r2
 8003144:	7819      	ldrb	r1, [r3, #0]
 8003146:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	4413      	add	r3, r2
 800314c:	3334      	adds	r3, #52	@ 0x34
 800314e:	460a      	mov	r2, r1
 8003150:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003152:	68ba      	ldr	r2, [r7, #8]
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	4413      	add	r3, r2
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d006      	beq.n	800316c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	3301      	adds	r3, #1
 8003162:	61fb      	str	r3, [r7, #28]
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	2b0f      	cmp	r3, #15
 8003168:	d9e9      	bls.n	800313e <prvInitialiseNewTask+0x56>
 800316a:	e000      	b.n	800316e <prvInitialiseNewTask+0x86>
			{
				break;
 800316c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800316e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003170:	2200      	movs	r2, #0
 8003172:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003176:	e003      	b.n	8003180 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800317a:	2200      	movs	r2, #0
 800317c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003182:	2b06      	cmp	r3, #6
 8003184:	d901      	bls.n	800318a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003186:	2306      	movs	r3, #6
 8003188:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800318a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800318c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800318e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003192:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003194:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003198:	2200      	movs	r2, #0
 800319a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800319c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800319e:	3304      	adds	r3, #4
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7ff fda2 	bl	8002cea <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80031a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031a8:	3318      	adds	r3, #24
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7ff fd9d 	bl	8002cea <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80031b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031b4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031b8:	f1c3 0207 	rsb	r2, r3, #7
 80031bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031be:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80031c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031c4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80031c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031c8:	2200      	movs	r2, #0
 80031ca:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80031ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80031d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031d8:	334c      	adds	r3, #76	@ 0x4c
 80031da:	224c      	movs	r2, #76	@ 0x4c
 80031dc:	2100      	movs	r1, #0
 80031de:	4618      	mov	r0, r3
 80031e0:	f001 f898 	bl	8004314 <memset>
 80031e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031e6:	4a0d      	ldr	r2, [pc, #52]	@ (800321c <prvInitialiseNewTask+0x134>)
 80031e8:	651a      	str	r2, [r3, #80]	@ 0x50
 80031ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031ec:	4a0c      	ldr	r2, [pc, #48]	@ (8003220 <prvInitialiseNewTask+0x138>)
 80031ee:	655a      	str	r2, [r3, #84]	@ 0x54
 80031f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031f2:	4a0c      	ldr	r2, [pc, #48]	@ (8003224 <prvInitialiseNewTask+0x13c>)
 80031f4:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80031f6:	683a      	ldr	r2, [r7, #0]
 80031f8:	68f9      	ldr	r1, [r7, #12]
 80031fa:	69b8      	ldr	r0, [r7, #24]
 80031fc:	f000 fc8e 	bl	8003b1c <pxPortInitialiseStack>
 8003200:	4602      	mov	r2, r0
 8003202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003204:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003208:	2b00      	cmp	r3, #0
 800320a:	d002      	beq.n	8003212 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800320c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800320e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003210:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003212:	bf00      	nop
 8003214:	3720      	adds	r7, #32
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	20004154 	.word	0x20004154
 8003220:	200041bc 	.word	0x200041bc
 8003224:	20004224 	.word	0x20004224

08003228 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003230:	f000 fda2 	bl	8003d78 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003234:	4b2a      	ldr	r3, [pc, #168]	@ (80032e0 <prvAddNewTaskToReadyList+0xb8>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	3301      	adds	r3, #1
 800323a:	4a29      	ldr	r2, [pc, #164]	@ (80032e0 <prvAddNewTaskToReadyList+0xb8>)
 800323c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800323e:	4b29      	ldr	r3, [pc, #164]	@ (80032e4 <prvAddNewTaskToReadyList+0xbc>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d109      	bne.n	800325a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003246:	4a27      	ldr	r2, [pc, #156]	@ (80032e4 <prvAddNewTaskToReadyList+0xbc>)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800324c:	4b24      	ldr	r3, [pc, #144]	@ (80032e0 <prvAddNewTaskToReadyList+0xb8>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2b01      	cmp	r3, #1
 8003252:	d110      	bne.n	8003276 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003254:	f000 fb38 	bl	80038c8 <prvInitialiseTaskLists>
 8003258:	e00d      	b.n	8003276 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800325a:	4b23      	ldr	r3, [pc, #140]	@ (80032e8 <prvAddNewTaskToReadyList+0xc0>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d109      	bne.n	8003276 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003262:	4b20      	ldr	r3, [pc, #128]	@ (80032e4 <prvAddNewTaskToReadyList+0xbc>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800326c:	429a      	cmp	r2, r3
 800326e:	d802      	bhi.n	8003276 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003270:	4a1c      	ldr	r2, [pc, #112]	@ (80032e4 <prvAddNewTaskToReadyList+0xbc>)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003276:	4b1d      	ldr	r3, [pc, #116]	@ (80032ec <prvAddNewTaskToReadyList+0xc4>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	3301      	adds	r3, #1
 800327c:	4a1b      	ldr	r2, [pc, #108]	@ (80032ec <prvAddNewTaskToReadyList+0xc4>)
 800327e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003284:	2201      	movs	r2, #1
 8003286:	409a      	lsls	r2, r3
 8003288:	4b19      	ldr	r3, [pc, #100]	@ (80032f0 <prvAddNewTaskToReadyList+0xc8>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4313      	orrs	r3, r2
 800328e:	4a18      	ldr	r2, [pc, #96]	@ (80032f0 <prvAddNewTaskToReadyList+0xc8>)
 8003290:	6013      	str	r3, [r2, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003296:	4613      	mov	r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	4413      	add	r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	4a15      	ldr	r2, [pc, #84]	@ (80032f4 <prvAddNewTaskToReadyList+0xcc>)
 80032a0:	441a      	add	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	3304      	adds	r3, #4
 80032a6:	4619      	mov	r1, r3
 80032a8:	4610      	mov	r0, r2
 80032aa:	f7ff fd2b 	bl	8002d04 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80032ae:	f000 fd95 	bl	8003ddc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80032b2:	4b0d      	ldr	r3, [pc, #52]	@ (80032e8 <prvAddNewTaskToReadyList+0xc0>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d00e      	beq.n	80032d8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80032ba:	4b0a      	ldr	r3, [pc, #40]	@ (80032e4 <prvAddNewTaskToReadyList+0xbc>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d207      	bcs.n	80032d8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80032c8:	4b0b      	ldr	r3, [pc, #44]	@ (80032f8 <prvAddNewTaskToReadyList+0xd0>)
 80032ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032ce:	601a      	str	r2, [r3, #0]
 80032d0:	f3bf 8f4f 	dsb	sy
 80032d4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80032d8:	bf00      	nop
 80032da:	3708      	adds	r7, #8
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	20000500 	.word	0x20000500
 80032e4:	20000400 	.word	0x20000400
 80032e8:	2000050c 	.word	0x2000050c
 80032ec:	2000051c 	.word	0x2000051c
 80032f0:	20000508 	.word	0x20000508
 80032f4:	20000404 	.word	0x20000404
 80032f8:	e000ed04 	.word	0xe000ed04

080032fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003304:	2300      	movs	r3, #0
 8003306:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d018      	beq.n	8003340 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800330e:	4b14      	ldr	r3, [pc, #80]	@ (8003360 <vTaskDelay+0x64>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00b      	beq.n	800332e <vTaskDelay+0x32>
	__asm volatile
 8003316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800331a:	f383 8811 	msr	BASEPRI, r3
 800331e:	f3bf 8f6f 	isb	sy
 8003322:	f3bf 8f4f 	dsb	sy
 8003326:	60bb      	str	r3, [r7, #8]
}
 8003328:	bf00      	nop
 800332a:	bf00      	nop
 800332c:	e7fd      	b.n	800332a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800332e:	f000 f885 	bl	800343c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003332:	2100      	movs	r1, #0
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f000 fb8b 	bl	8003a50 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800333a:	f000 f88d 	bl	8003458 <xTaskResumeAll>
 800333e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d107      	bne.n	8003356 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003346:	4b07      	ldr	r3, [pc, #28]	@ (8003364 <vTaskDelay+0x68>)
 8003348:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800334c:	601a      	str	r2, [r3, #0]
 800334e:	f3bf 8f4f 	dsb	sy
 8003352:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003356:	bf00      	nop
 8003358:	3710      	adds	r7, #16
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	20000528 	.word	0x20000528
 8003364:	e000ed04 	.word	0xe000ed04

08003368 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b08a      	sub	sp, #40	@ 0x28
 800336c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800336e:	2300      	movs	r3, #0
 8003370:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003372:	2300      	movs	r3, #0
 8003374:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003376:	463a      	mov	r2, r7
 8003378:	1d39      	adds	r1, r7, #4
 800337a:	f107 0308 	add.w	r3, r7, #8
 800337e:	4618      	mov	r0, r3
 8003380:	f7fd f89e 	bl	80004c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003384:	6839      	ldr	r1, [r7, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	68ba      	ldr	r2, [r7, #8]
 800338a:	9202      	str	r2, [sp, #8]
 800338c:	9301      	str	r3, [sp, #4]
 800338e:	2300      	movs	r3, #0
 8003390:	9300      	str	r3, [sp, #0]
 8003392:	2300      	movs	r3, #0
 8003394:	460a      	mov	r2, r1
 8003396:	4921      	ldr	r1, [pc, #132]	@ (800341c <vTaskStartScheduler+0xb4>)
 8003398:	4821      	ldr	r0, [pc, #132]	@ (8003420 <vTaskStartScheduler+0xb8>)
 800339a:	f7ff fdff 	bl	8002f9c <xTaskCreateStatic>
 800339e:	4603      	mov	r3, r0
 80033a0:	4a20      	ldr	r2, [pc, #128]	@ (8003424 <vTaskStartScheduler+0xbc>)
 80033a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80033a4:	4b1f      	ldr	r3, [pc, #124]	@ (8003424 <vTaskStartScheduler+0xbc>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d002      	beq.n	80033b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80033ac:	2301      	movs	r3, #1
 80033ae:	617b      	str	r3, [r7, #20]
 80033b0:	e001      	b.n	80033b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80033b2:	2300      	movs	r3, #0
 80033b4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d11b      	bne.n	80033f4 <vTaskStartScheduler+0x8c>
	__asm volatile
 80033bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033c0:	f383 8811 	msr	BASEPRI, r3
 80033c4:	f3bf 8f6f 	isb	sy
 80033c8:	f3bf 8f4f 	dsb	sy
 80033cc:	613b      	str	r3, [r7, #16]
}
 80033ce:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80033d0:	4b15      	ldr	r3, [pc, #84]	@ (8003428 <vTaskStartScheduler+0xc0>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	334c      	adds	r3, #76	@ 0x4c
 80033d6:	4a15      	ldr	r2, [pc, #84]	@ (800342c <vTaskStartScheduler+0xc4>)
 80033d8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80033da:	4b15      	ldr	r3, [pc, #84]	@ (8003430 <vTaskStartScheduler+0xc8>)
 80033dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80033e0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80033e2:	4b14      	ldr	r3, [pc, #80]	@ (8003434 <vTaskStartScheduler+0xcc>)
 80033e4:	2201      	movs	r2, #1
 80033e6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80033e8:	4b13      	ldr	r3, [pc, #76]	@ (8003438 <vTaskStartScheduler+0xd0>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80033ee:	f000 fc1f 	bl	8003c30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80033f2:	e00f      	b.n	8003414 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80033fa:	d10b      	bne.n	8003414 <vTaskStartScheduler+0xac>
	__asm volatile
 80033fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003400:	f383 8811 	msr	BASEPRI, r3
 8003404:	f3bf 8f6f 	isb	sy
 8003408:	f3bf 8f4f 	dsb	sy
 800340c:	60fb      	str	r3, [r7, #12]
}
 800340e:	bf00      	nop
 8003410:	bf00      	nop
 8003412:	e7fd      	b.n	8003410 <vTaskStartScheduler+0xa8>
}
 8003414:	bf00      	nop
 8003416:	3718      	adds	r7, #24
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	08004578 	.word	0x08004578
 8003420:	08003899 	.word	0x08003899
 8003424:	20000524 	.word	0x20000524
 8003428:	20000400 	.word	0x20000400
 800342c:	20000010 	.word	0x20000010
 8003430:	20000520 	.word	0x20000520
 8003434:	2000050c 	.word	0x2000050c
 8003438:	20000504 	.word	0x20000504

0800343c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800343c:	b480      	push	{r7}
 800343e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003440:	4b04      	ldr	r3, [pc, #16]	@ (8003454 <vTaskSuspendAll+0x18>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	3301      	adds	r3, #1
 8003446:	4a03      	ldr	r2, [pc, #12]	@ (8003454 <vTaskSuspendAll+0x18>)
 8003448:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800344a:	bf00      	nop
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr
 8003454:	20000528 	.word	0x20000528

08003458 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800345e:	2300      	movs	r3, #0
 8003460:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003462:	2300      	movs	r3, #0
 8003464:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003466:	4b42      	ldr	r3, [pc, #264]	@ (8003570 <xTaskResumeAll+0x118>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d10b      	bne.n	8003486 <xTaskResumeAll+0x2e>
	__asm volatile
 800346e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003472:	f383 8811 	msr	BASEPRI, r3
 8003476:	f3bf 8f6f 	isb	sy
 800347a:	f3bf 8f4f 	dsb	sy
 800347e:	603b      	str	r3, [r7, #0]
}
 8003480:	bf00      	nop
 8003482:	bf00      	nop
 8003484:	e7fd      	b.n	8003482 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003486:	f000 fc77 	bl	8003d78 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800348a:	4b39      	ldr	r3, [pc, #228]	@ (8003570 <xTaskResumeAll+0x118>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	3b01      	subs	r3, #1
 8003490:	4a37      	ldr	r2, [pc, #220]	@ (8003570 <xTaskResumeAll+0x118>)
 8003492:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003494:	4b36      	ldr	r3, [pc, #216]	@ (8003570 <xTaskResumeAll+0x118>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d161      	bne.n	8003560 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800349c:	4b35      	ldr	r3, [pc, #212]	@ (8003574 <xTaskResumeAll+0x11c>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d05d      	beq.n	8003560 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80034a4:	e02e      	b.n	8003504 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034a6:	4b34      	ldr	r3, [pc, #208]	@ (8003578 <xTaskResumeAll+0x120>)
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	3318      	adds	r3, #24
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7ff fc83 	bl	8002dbe <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	3304      	adds	r3, #4
 80034bc:	4618      	mov	r0, r3
 80034be:	f7ff fc7e 	bl	8002dbe <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034c6:	2201      	movs	r2, #1
 80034c8:	409a      	lsls	r2, r3
 80034ca:	4b2c      	ldr	r3, [pc, #176]	@ (800357c <xTaskResumeAll+0x124>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	4a2a      	ldr	r2, [pc, #168]	@ (800357c <xTaskResumeAll+0x124>)
 80034d2:	6013      	str	r3, [r2, #0]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034d8:	4613      	mov	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	4413      	add	r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	4a27      	ldr	r2, [pc, #156]	@ (8003580 <xTaskResumeAll+0x128>)
 80034e2:	441a      	add	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	3304      	adds	r3, #4
 80034e8:	4619      	mov	r1, r3
 80034ea:	4610      	mov	r0, r2
 80034ec:	f7ff fc0a 	bl	8002d04 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034f4:	4b23      	ldr	r3, [pc, #140]	@ (8003584 <xTaskResumeAll+0x12c>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d302      	bcc.n	8003504 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80034fe:	4b22      	ldr	r3, [pc, #136]	@ (8003588 <xTaskResumeAll+0x130>)
 8003500:	2201      	movs	r2, #1
 8003502:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003504:	4b1c      	ldr	r3, [pc, #112]	@ (8003578 <xTaskResumeAll+0x120>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d1cc      	bne.n	80034a6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003512:	f000 fa7d 	bl	8003a10 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003516:	4b1d      	ldr	r3, [pc, #116]	@ (800358c <xTaskResumeAll+0x134>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d010      	beq.n	8003544 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003522:	f000 f837 	bl	8003594 <xTaskIncrementTick>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d002      	beq.n	8003532 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800352c:	4b16      	ldr	r3, [pc, #88]	@ (8003588 <xTaskResumeAll+0x130>)
 800352e:	2201      	movs	r2, #1
 8003530:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	3b01      	subs	r3, #1
 8003536:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1f1      	bne.n	8003522 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800353e:	4b13      	ldr	r3, [pc, #76]	@ (800358c <xTaskResumeAll+0x134>)
 8003540:	2200      	movs	r2, #0
 8003542:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003544:	4b10      	ldr	r3, [pc, #64]	@ (8003588 <xTaskResumeAll+0x130>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d009      	beq.n	8003560 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800354c:	2301      	movs	r3, #1
 800354e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003550:	4b0f      	ldr	r3, [pc, #60]	@ (8003590 <xTaskResumeAll+0x138>)
 8003552:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003556:	601a      	str	r2, [r3, #0]
 8003558:	f3bf 8f4f 	dsb	sy
 800355c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003560:	f000 fc3c 	bl	8003ddc <vPortExitCritical>

	return xAlreadyYielded;
 8003564:	68bb      	ldr	r3, [r7, #8]
}
 8003566:	4618      	mov	r0, r3
 8003568:	3710      	adds	r7, #16
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	20000528 	.word	0x20000528
 8003574:	20000500 	.word	0x20000500
 8003578:	200004c0 	.word	0x200004c0
 800357c:	20000508 	.word	0x20000508
 8003580:	20000404 	.word	0x20000404
 8003584:	20000400 	.word	0x20000400
 8003588:	20000514 	.word	0x20000514
 800358c:	20000510 	.word	0x20000510
 8003590:	e000ed04 	.word	0xe000ed04

08003594 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b086      	sub	sp, #24
 8003598:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800359a:	2300      	movs	r3, #0
 800359c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800359e:	4b4f      	ldr	r3, [pc, #316]	@ (80036dc <xTaskIncrementTick+0x148>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	f040 808f 	bne.w	80036c6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80035a8:	4b4d      	ldr	r3, [pc, #308]	@ (80036e0 <xTaskIncrementTick+0x14c>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	3301      	adds	r3, #1
 80035ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80035b0:	4a4b      	ldr	r2, [pc, #300]	@ (80036e0 <xTaskIncrementTick+0x14c>)
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d121      	bne.n	8003600 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80035bc:	4b49      	ldr	r3, [pc, #292]	@ (80036e4 <xTaskIncrementTick+0x150>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00b      	beq.n	80035de <xTaskIncrementTick+0x4a>
	__asm volatile
 80035c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035ca:	f383 8811 	msr	BASEPRI, r3
 80035ce:	f3bf 8f6f 	isb	sy
 80035d2:	f3bf 8f4f 	dsb	sy
 80035d6:	603b      	str	r3, [r7, #0]
}
 80035d8:	bf00      	nop
 80035da:	bf00      	nop
 80035dc:	e7fd      	b.n	80035da <xTaskIncrementTick+0x46>
 80035de:	4b41      	ldr	r3, [pc, #260]	@ (80036e4 <xTaskIncrementTick+0x150>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	60fb      	str	r3, [r7, #12]
 80035e4:	4b40      	ldr	r3, [pc, #256]	@ (80036e8 <xTaskIncrementTick+0x154>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a3e      	ldr	r2, [pc, #248]	@ (80036e4 <xTaskIncrementTick+0x150>)
 80035ea:	6013      	str	r3, [r2, #0]
 80035ec:	4a3e      	ldr	r2, [pc, #248]	@ (80036e8 <xTaskIncrementTick+0x154>)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6013      	str	r3, [r2, #0]
 80035f2:	4b3e      	ldr	r3, [pc, #248]	@ (80036ec <xTaskIncrementTick+0x158>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	3301      	adds	r3, #1
 80035f8:	4a3c      	ldr	r2, [pc, #240]	@ (80036ec <xTaskIncrementTick+0x158>)
 80035fa:	6013      	str	r3, [r2, #0]
 80035fc:	f000 fa08 	bl	8003a10 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003600:	4b3b      	ldr	r3, [pc, #236]	@ (80036f0 <xTaskIncrementTick+0x15c>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	429a      	cmp	r2, r3
 8003608:	d348      	bcc.n	800369c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800360a:	4b36      	ldr	r3, [pc, #216]	@ (80036e4 <xTaskIncrementTick+0x150>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d104      	bne.n	800361e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003614:	4b36      	ldr	r3, [pc, #216]	@ (80036f0 <xTaskIncrementTick+0x15c>)
 8003616:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800361a:	601a      	str	r2, [r3, #0]
					break;
 800361c:	e03e      	b.n	800369c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800361e:	4b31      	ldr	r3, [pc, #196]	@ (80036e4 <xTaskIncrementTick+0x150>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800362e:	693a      	ldr	r2, [r7, #16]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	429a      	cmp	r2, r3
 8003634:	d203      	bcs.n	800363e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003636:	4a2e      	ldr	r2, [pc, #184]	@ (80036f0 <xTaskIncrementTick+0x15c>)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800363c:	e02e      	b.n	800369c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	3304      	adds	r3, #4
 8003642:	4618      	mov	r0, r3
 8003644:	f7ff fbbb 	bl	8002dbe <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800364c:	2b00      	cmp	r3, #0
 800364e:	d004      	beq.n	800365a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	3318      	adds	r3, #24
 8003654:	4618      	mov	r0, r3
 8003656:	f7ff fbb2 	bl	8002dbe <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800365e:	2201      	movs	r2, #1
 8003660:	409a      	lsls	r2, r3
 8003662:	4b24      	ldr	r3, [pc, #144]	@ (80036f4 <xTaskIncrementTick+0x160>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4313      	orrs	r3, r2
 8003668:	4a22      	ldr	r2, [pc, #136]	@ (80036f4 <xTaskIncrementTick+0x160>)
 800366a:	6013      	str	r3, [r2, #0]
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003670:	4613      	mov	r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	4413      	add	r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	4a1f      	ldr	r2, [pc, #124]	@ (80036f8 <xTaskIncrementTick+0x164>)
 800367a:	441a      	add	r2, r3
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	3304      	adds	r3, #4
 8003680:	4619      	mov	r1, r3
 8003682:	4610      	mov	r0, r2
 8003684:	f7ff fb3e 	bl	8002d04 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800368c:	4b1b      	ldr	r3, [pc, #108]	@ (80036fc <xTaskIncrementTick+0x168>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003692:	429a      	cmp	r2, r3
 8003694:	d3b9      	bcc.n	800360a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003696:	2301      	movs	r3, #1
 8003698:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800369a:	e7b6      	b.n	800360a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800369c:	4b17      	ldr	r3, [pc, #92]	@ (80036fc <xTaskIncrementTick+0x168>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036a2:	4915      	ldr	r1, [pc, #84]	@ (80036f8 <xTaskIncrementTick+0x164>)
 80036a4:	4613      	mov	r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4413      	add	r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	440b      	add	r3, r1
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d901      	bls.n	80036b8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80036b4:	2301      	movs	r3, #1
 80036b6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80036b8:	4b11      	ldr	r3, [pc, #68]	@ (8003700 <xTaskIncrementTick+0x16c>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d007      	beq.n	80036d0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80036c0:	2301      	movs	r3, #1
 80036c2:	617b      	str	r3, [r7, #20]
 80036c4:	e004      	b.n	80036d0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80036c6:	4b0f      	ldr	r3, [pc, #60]	@ (8003704 <xTaskIncrementTick+0x170>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	3301      	adds	r3, #1
 80036cc:	4a0d      	ldr	r2, [pc, #52]	@ (8003704 <xTaskIncrementTick+0x170>)
 80036ce:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80036d0:	697b      	ldr	r3, [r7, #20]
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3718      	adds	r7, #24
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	20000528 	.word	0x20000528
 80036e0:	20000504 	.word	0x20000504
 80036e4:	200004b8 	.word	0x200004b8
 80036e8:	200004bc 	.word	0x200004bc
 80036ec:	20000518 	.word	0x20000518
 80036f0:	20000520 	.word	0x20000520
 80036f4:	20000508 	.word	0x20000508
 80036f8:	20000404 	.word	0x20000404
 80036fc:	20000400 	.word	0x20000400
 8003700:	20000514 	.word	0x20000514
 8003704:	20000510 	.word	0x20000510

08003708 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003708:	b480      	push	{r7}
 800370a:	b087      	sub	sp, #28
 800370c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800370e:	4b2a      	ldr	r3, [pc, #168]	@ (80037b8 <vTaskSwitchContext+0xb0>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d003      	beq.n	800371e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003716:	4b29      	ldr	r3, [pc, #164]	@ (80037bc <vTaskSwitchContext+0xb4>)
 8003718:	2201      	movs	r2, #1
 800371a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800371c:	e045      	b.n	80037aa <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800371e:	4b27      	ldr	r3, [pc, #156]	@ (80037bc <vTaskSwitchContext+0xb4>)
 8003720:	2200      	movs	r2, #0
 8003722:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003724:	4b26      	ldr	r3, [pc, #152]	@ (80037c0 <vTaskSwitchContext+0xb8>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	fab3 f383 	clz	r3, r3
 8003730:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003732:	7afb      	ldrb	r3, [r7, #11]
 8003734:	f1c3 031f 	rsb	r3, r3, #31
 8003738:	617b      	str	r3, [r7, #20]
 800373a:	4922      	ldr	r1, [pc, #136]	@ (80037c4 <vTaskSwitchContext+0xbc>)
 800373c:	697a      	ldr	r2, [r7, #20]
 800373e:	4613      	mov	r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	4413      	add	r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	440b      	add	r3, r1
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d10b      	bne.n	8003766 <vTaskSwitchContext+0x5e>
	__asm volatile
 800374e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003752:	f383 8811 	msr	BASEPRI, r3
 8003756:	f3bf 8f6f 	isb	sy
 800375a:	f3bf 8f4f 	dsb	sy
 800375e:	607b      	str	r3, [r7, #4]
}
 8003760:	bf00      	nop
 8003762:	bf00      	nop
 8003764:	e7fd      	b.n	8003762 <vTaskSwitchContext+0x5a>
 8003766:	697a      	ldr	r2, [r7, #20]
 8003768:	4613      	mov	r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	4413      	add	r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	4a14      	ldr	r2, [pc, #80]	@ (80037c4 <vTaskSwitchContext+0xbc>)
 8003772:	4413      	add	r3, r2
 8003774:	613b      	str	r3, [r7, #16]
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	685a      	ldr	r2, [r3, #4]
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	605a      	str	r2, [r3, #4]
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	685a      	ldr	r2, [r3, #4]
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	3308      	adds	r3, #8
 8003788:	429a      	cmp	r2, r3
 800378a:	d104      	bne.n	8003796 <vTaskSwitchContext+0x8e>
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	685a      	ldr	r2, [r3, #4]
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	605a      	str	r2, [r3, #4]
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	4a0a      	ldr	r2, [pc, #40]	@ (80037c8 <vTaskSwitchContext+0xc0>)
 800379e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80037a0:	4b09      	ldr	r3, [pc, #36]	@ (80037c8 <vTaskSwitchContext+0xc0>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	334c      	adds	r3, #76	@ 0x4c
 80037a6:	4a09      	ldr	r2, [pc, #36]	@ (80037cc <vTaskSwitchContext+0xc4>)
 80037a8:	6013      	str	r3, [r2, #0]
}
 80037aa:	bf00      	nop
 80037ac:	371c      	adds	r7, #28
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	20000528 	.word	0x20000528
 80037bc:	20000514 	.word	0x20000514
 80037c0:	20000508 	.word	0x20000508
 80037c4:	20000404 	.word	0x20000404
 80037c8:	20000400 	.word	0x20000400
 80037cc:	20000010 	.word	0x20000010

080037d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b086      	sub	sp, #24
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d10b      	bne.n	80037fe <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80037e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037ea:	f383 8811 	msr	BASEPRI, r3
 80037ee:	f3bf 8f6f 	isb	sy
 80037f2:	f3bf 8f4f 	dsb	sy
 80037f6:	60fb      	str	r3, [r7, #12]
}
 80037f8:	bf00      	nop
 80037fa:	bf00      	nop
 80037fc:	e7fd      	b.n	80037fa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	3318      	adds	r3, #24
 8003802:	4618      	mov	r0, r3
 8003804:	f7ff fadb 	bl	8002dbe <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003808:	4b1d      	ldr	r3, [pc, #116]	@ (8003880 <xTaskRemoveFromEventList+0xb0>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d11c      	bne.n	800384a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	3304      	adds	r3, #4
 8003814:	4618      	mov	r0, r3
 8003816:	f7ff fad2 	bl	8002dbe <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800381e:	2201      	movs	r2, #1
 8003820:	409a      	lsls	r2, r3
 8003822:	4b18      	ldr	r3, [pc, #96]	@ (8003884 <xTaskRemoveFromEventList+0xb4>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4313      	orrs	r3, r2
 8003828:	4a16      	ldr	r2, [pc, #88]	@ (8003884 <xTaskRemoveFromEventList+0xb4>)
 800382a:	6013      	str	r3, [r2, #0]
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003830:	4613      	mov	r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	4413      	add	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	4a13      	ldr	r2, [pc, #76]	@ (8003888 <xTaskRemoveFromEventList+0xb8>)
 800383a:	441a      	add	r2, r3
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	3304      	adds	r3, #4
 8003840:	4619      	mov	r1, r3
 8003842:	4610      	mov	r0, r2
 8003844:	f7ff fa5e 	bl	8002d04 <vListInsertEnd>
 8003848:	e005      	b.n	8003856 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	3318      	adds	r3, #24
 800384e:	4619      	mov	r1, r3
 8003850:	480e      	ldr	r0, [pc, #56]	@ (800388c <xTaskRemoveFromEventList+0xbc>)
 8003852:	f7ff fa57 	bl	8002d04 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800385a:	4b0d      	ldr	r3, [pc, #52]	@ (8003890 <xTaskRemoveFromEventList+0xc0>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003860:	429a      	cmp	r2, r3
 8003862:	d905      	bls.n	8003870 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003864:	2301      	movs	r3, #1
 8003866:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003868:	4b0a      	ldr	r3, [pc, #40]	@ (8003894 <xTaskRemoveFromEventList+0xc4>)
 800386a:	2201      	movs	r2, #1
 800386c:	601a      	str	r2, [r3, #0]
 800386e:	e001      	b.n	8003874 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003870:	2300      	movs	r3, #0
 8003872:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003874:	697b      	ldr	r3, [r7, #20]
}
 8003876:	4618      	mov	r0, r3
 8003878:	3718      	adds	r7, #24
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	20000528 	.word	0x20000528
 8003884:	20000508 	.word	0x20000508
 8003888:	20000404 	.word	0x20000404
 800388c:	200004c0 	.word	0x200004c0
 8003890:	20000400 	.word	0x20000400
 8003894:	20000514 	.word	0x20000514

08003898 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80038a0:	f000 f852 	bl	8003948 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80038a4:	4b06      	ldr	r3, [pc, #24]	@ (80038c0 <prvIdleTask+0x28>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d9f9      	bls.n	80038a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80038ac:	4b05      	ldr	r3, [pc, #20]	@ (80038c4 <prvIdleTask+0x2c>)
 80038ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038b2:	601a      	str	r2, [r3, #0]
 80038b4:	f3bf 8f4f 	dsb	sy
 80038b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80038bc:	e7f0      	b.n	80038a0 <prvIdleTask+0x8>
 80038be:	bf00      	nop
 80038c0:	20000404 	.word	0x20000404
 80038c4:	e000ed04 	.word	0xe000ed04

080038c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80038ce:	2300      	movs	r3, #0
 80038d0:	607b      	str	r3, [r7, #4]
 80038d2:	e00c      	b.n	80038ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	4613      	mov	r3, r2
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	4413      	add	r3, r2
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	4a12      	ldr	r2, [pc, #72]	@ (8003928 <prvInitialiseTaskLists+0x60>)
 80038e0:	4413      	add	r3, r2
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7ff f9e1 	bl	8002caa <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	3301      	adds	r3, #1
 80038ec:	607b      	str	r3, [r7, #4]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2b06      	cmp	r3, #6
 80038f2:	d9ef      	bls.n	80038d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80038f4:	480d      	ldr	r0, [pc, #52]	@ (800392c <prvInitialiseTaskLists+0x64>)
 80038f6:	f7ff f9d8 	bl	8002caa <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80038fa:	480d      	ldr	r0, [pc, #52]	@ (8003930 <prvInitialiseTaskLists+0x68>)
 80038fc:	f7ff f9d5 	bl	8002caa <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003900:	480c      	ldr	r0, [pc, #48]	@ (8003934 <prvInitialiseTaskLists+0x6c>)
 8003902:	f7ff f9d2 	bl	8002caa <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003906:	480c      	ldr	r0, [pc, #48]	@ (8003938 <prvInitialiseTaskLists+0x70>)
 8003908:	f7ff f9cf 	bl	8002caa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800390c:	480b      	ldr	r0, [pc, #44]	@ (800393c <prvInitialiseTaskLists+0x74>)
 800390e:	f7ff f9cc 	bl	8002caa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003912:	4b0b      	ldr	r3, [pc, #44]	@ (8003940 <prvInitialiseTaskLists+0x78>)
 8003914:	4a05      	ldr	r2, [pc, #20]	@ (800392c <prvInitialiseTaskLists+0x64>)
 8003916:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003918:	4b0a      	ldr	r3, [pc, #40]	@ (8003944 <prvInitialiseTaskLists+0x7c>)
 800391a:	4a05      	ldr	r2, [pc, #20]	@ (8003930 <prvInitialiseTaskLists+0x68>)
 800391c:	601a      	str	r2, [r3, #0]
}
 800391e:	bf00      	nop
 8003920:	3708      	adds	r7, #8
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	20000404 	.word	0x20000404
 800392c:	20000490 	.word	0x20000490
 8003930:	200004a4 	.word	0x200004a4
 8003934:	200004c0 	.word	0x200004c0
 8003938:	200004d4 	.word	0x200004d4
 800393c:	200004ec 	.word	0x200004ec
 8003940:	200004b8 	.word	0x200004b8
 8003944:	200004bc 	.word	0x200004bc

08003948 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800394e:	e019      	b.n	8003984 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003950:	f000 fa12 	bl	8003d78 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003954:	4b10      	ldr	r3, [pc, #64]	@ (8003998 <prvCheckTasksWaitingTermination+0x50>)
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	3304      	adds	r3, #4
 8003960:	4618      	mov	r0, r3
 8003962:	f7ff fa2c 	bl	8002dbe <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003966:	4b0d      	ldr	r3, [pc, #52]	@ (800399c <prvCheckTasksWaitingTermination+0x54>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	3b01      	subs	r3, #1
 800396c:	4a0b      	ldr	r2, [pc, #44]	@ (800399c <prvCheckTasksWaitingTermination+0x54>)
 800396e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003970:	4b0b      	ldr	r3, [pc, #44]	@ (80039a0 <prvCheckTasksWaitingTermination+0x58>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	3b01      	subs	r3, #1
 8003976:	4a0a      	ldr	r2, [pc, #40]	@ (80039a0 <prvCheckTasksWaitingTermination+0x58>)
 8003978:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800397a:	f000 fa2f 	bl	8003ddc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 f810 	bl	80039a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003984:	4b06      	ldr	r3, [pc, #24]	@ (80039a0 <prvCheckTasksWaitingTermination+0x58>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1e1      	bne.n	8003950 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800398c:	bf00      	nop
 800398e:	bf00      	nop
 8003990:	3708      	adds	r7, #8
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	200004d4 	.word	0x200004d4
 800399c:	20000500 	.word	0x20000500
 80039a0:	200004e8 	.word	0x200004e8

080039a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	334c      	adds	r3, #76	@ 0x4c
 80039b0:	4618      	mov	r0, r3
 80039b2:	f000 fcb7 	bl	8004324 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d108      	bne.n	80039d2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039c4:	4618      	mov	r0, r3
 80039c6:	f000 fb85 	bl	80040d4 <vPortFree>
				vPortFree( pxTCB );
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 fb82 	bl	80040d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80039d0:	e019      	b.n	8003a06 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d103      	bne.n	80039e4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 fb79 	bl	80040d4 <vPortFree>
	}
 80039e2:	e010      	b.n	8003a06 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d00b      	beq.n	8003a06 <prvDeleteTCB+0x62>
	__asm volatile
 80039ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039f2:	f383 8811 	msr	BASEPRI, r3
 80039f6:	f3bf 8f6f 	isb	sy
 80039fa:	f3bf 8f4f 	dsb	sy
 80039fe:	60fb      	str	r3, [r7, #12]
}
 8003a00:	bf00      	nop
 8003a02:	bf00      	nop
 8003a04:	e7fd      	b.n	8003a02 <prvDeleteTCB+0x5e>
	}
 8003a06:	bf00      	nop
 8003a08:	3710      	adds	r7, #16
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
	...

08003a10 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a16:	4b0c      	ldr	r3, [pc, #48]	@ (8003a48 <prvResetNextTaskUnblockTime+0x38>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d104      	bne.n	8003a2a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003a20:	4b0a      	ldr	r3, [pc, #40]	@ (8003a4c <prvResetNextTaskUnblockTime+0x3c>)
 8003a22:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003a26:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003a28:	e008      	b.n	8003a3c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a2a:	4b07      	ldr	r3, [pc, #28]	@ (8003a48 <prvResetNextTaskUnblockTime+0x38>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	4a04      	ldr	r2, [pc, #16]	@ (8003a4c <prvResetNextTaskUnblockTime+0x3c>)
 8003a3a:	6013      	str	r3, [r2, #0]
}
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr
 8003a48:	200004b8 	.word	0x200004b8
 8003a4c:	20000520 	.word	0x20000520

08003a50 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003a5a:	4b29      	ldr	r3, [pc, #164]	@ (8003b00 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a60:	4b28      	ldr	r3, [pc, #160]	@ (8003b04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	3304      	adds	r3, #4
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7ff f9a9 	bl	8002dbe <uxListRemove>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d10b      	bne.n	8003a8a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003a72:	4b24      	ldr	r3, [pc, #144]	@ (8003b04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a78:	2201      	movs	r2, #1
 8003a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7e:	43da      	mvns	r2, r3
 8003a80:	4b21      	ldr	r3, [pc, #132]	@ (8003b08 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4013      	ands	r3, r2
 8003a86:	4a20      	ldr	r2, [pc, #128]	@ (8003b08 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003a88:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a90:	d10a      	bne.n	8003aa8 <prvAddCurrentTaskToDelayedList+0x58>
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d007      	beq.n	8003aa8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a98:	4b1a      	ldr	r3, [pc, #104]	@ (8003b04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	3304      	adds	r3, #4
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	481a      	ldr	r0, [pc, #104]	@ (8003b0c <prvAddCurrentTaskToDelayedList+0xbc>)
 8003aa2:	f7ff f92f 	bl	8002d04 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003aa6:	e026      	b.n	8003af6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003aa8:	68fa      	ldr	r2, [r7, #12]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4413      	add	r3, r2
 8003aae:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003ab0:	4b14      	ldr	r3, [pc, #80]	@ (8003b04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68ba      	ldr	r2, [r7, #8]
 8003ab6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003ab8:	68ba      	ldr	r2, [r7, #8]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d209      	bcs.n	8003ad4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ac0:	4b13      	ldr	r3, [pc, #76]	@ (8003b10 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	4b0f      	ldr	r3, [pc, #60]	@ (8003b04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	3304      	adds	r3, #4
 8003aca:	4619      	mov	r1, r3
 8003acc:	4610      	mov	r0, r2
 8003ace:	f7ff f93d 	bl	8002d4c <vListInsert>
}
 8003ad2:	e010      	b.n	8003af6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ad4:	4b0f      	ldr	r3, [pc, #60]	@ (8003b14 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	4b0a      	ldr	r3, [pc, #40]	@ (8003b04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	3304      	adds	r3, #4
 8003ade:	4619      	mov	r1, r3
 8003ae0:	4610      	mov	r0, r2
 8003ae2:	f7ff f933 	bl	8002d4c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003ae6:	4b0c      	ldr	r3, [pc, #48]	@ (8003b18 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68ba      	ldr	r2, [r7, #8]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d202      	bcs.n	8003af6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003af0:	4a09      	ldr	r2, [pc, #36]	@ (8003b18 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	6013      	str	r3, [r2, #0]
}
 8003af6:	bf00      	nop
 8003af8:	3710      	adds	r7, #16
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	20000504 	.word	0x20000504
 8003b04:	20000400 	.word	0x20000400
 8003b08:	20000508 	.word	0x20000508
 8003b0c:	200004ec 	.word	0x200004ec
 8003b10:	200004bc 	.word	0x200004bc
 8003b14:	200004b8 	.word	0x200004b8
 8003b18:	20000520 	.word	0x20000520

08003b1c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b085      	sub	sp, #20
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	3b04      	subs	r3, #4
 8003b2c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003b34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	3b04      	subs	r3, #4
 8003b3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	f023 0201 	bic.w	r2, r3, #1
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	3b04      	subs	r3, #4
 8003b4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003b4c:	4a0c      	ldr	r2, [pc, #48]	@ (8003b80 <pxPortInitialiseStack+0x64>)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	3b14      	subs	r3, #20
 8003b56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	3b04      	subs	r3, #4
 8003b62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f06f 0202 	mvn.w	r2, #2
 8003b6a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	3b20      	subs	r3, #32
 8003b70:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003b72:	68fb      	ldr	r3, [r7, #12]
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3714      	adds	r7, #20
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr
 8003b80:	08003b85 	.word	0x08003b85

08003b84 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003b8e:	4b13      	ldr	r3, [pc, #76]	@ (8003bdc <prvTaskExitError+0x58>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b96:	d00b      	beq.n	8003bb0 <prvTaskExitError+0x2c>
	__asm volatile
 8003b98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b9c:	f383 8811 	msr	BASEPRI, r3
 8003ba0:	f3bf 8f6f 	isb	sy
 8003ba4:	f3bf 8f4f 	dsb	sy
 8003ba8:	60fb      	str	r3, [r7, #12]
}
 8003baa:	bf00      	nop
 8003bac:	bf00      	nop
 8003bae:	e7fd      	b.n	8003bac <prvTaskExitError+0x28>
	__asm volatile
 8003bb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bb4:	f383 8811 	msr	BASEPRI, r3
 8003bb8:	f3bf 8f6f 	isb	sy
 8003bbc:	f3bf 8f4f 	dsb	sy
 8003bc0:	60bb      	str	r3, [r7, #8]
}
 8003bc2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003bc4:	bf00      	nop
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d0fc      	beq.n	8003bc6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003bcc:	bf00      	nop
 8003bce:	bf00      	nop
 8003bd0:	3714      	adds	r7, #20
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	2000000c 	.word	0x2000000c

08003be0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003be0:	4b07      	ldr	r3, [pc, #28]	@ (8003c00 <pxCurrentTCBConst2>)
 8003be2:	6819      	ldr	r1, [r3, #0]
 8003be4:	6808      	ldr	r0, [r1, #0]
 8003be6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bea:	f380 8809 	msr	PSP, r0
 8003bee:	f3bf 8f6f 	isb	sy
 8003bf2:	f04f 0000 	mov.w	r0, #0
 8003bf6:	f380 8811 	msr	BASEPRI, r0
 8003bfa:	4770      	bx	lr
 8003bfc:	f3af 8000 	nop.w

08003c00 <pxCurrentTCBConst2>:
 8003c00:	20000400 	.word	0x20000400
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003c04:	bf00      	nop
 8003c06:	bf00      	nop

08003c08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003c08:	4808      	ldr	r0, [pc, #32]	@ (8003c2c <prvPortStartFirstTask+0x24>)
 8003c0a:	6800      	ldr	r0, [r0, #0]
 8003c0c:	6800      	ldr	r0, [r0, #0]
 8003c0e:	f380 8808 	msr	MSP, r0
 8003c12:	f04f 0000 	mov.w	r0, #0
 8003c16:	f380 8814 	msr	CONTROL, r0
 8003c1a:	b662      	cpsie	i
 8003c1c:	b661      	cpsie	f
 8003c1e:	f3bf 8f4f 	dsb	sy
 8003c22:	f3bf 8f6f 	isb	sy
 8003c26:	df00      	svc	0
 8003c28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003c2a:	bf00      	nop
 8003c2c:	e000ed08 	.word	0xe000ed08

08003c30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b086      	sub	sp, #24
 8003c34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003c36:	4b47      	ldr	r3, [pc, #284]	@ (8003d54 <xPortStartScheduler+0x124>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a47      	ldr	r2, [pc, #284]	@ (8003d58 <xPortStartScheduler+0x128>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d10b      	bne.n	8003c58 <xPortStartScheduler+0x28>
	__asm volatile
 8003c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c44:	f383 8811 	msr	BASEPRI, r3
 8003c48:	f3bf 8f6f 	isb	sy
 8003c4c:	f3bf 8f4f 	dsb	sy
 8003c50:	613b      	str	r3, [r7, #16]
}
 8003c52:	bf00      	nop
 8003c54:	bf00      	nop
 8003c56:	e7fd      	b.n	8003c54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003c58:	4b3e      	ldr	r3, [pc, #248]	@ (8003d54 <xPortStartScheduler+0x124>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a3f      	ldr	r2, [pc, #252]	@ (8003d5c <xPortStartScheduler+0x12c>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d10b      	bne.n	8003c7a <xPortStartScheduler+0x4a>
	__asm volatile
 8003c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c66:	f383 8811 	msr	BASEPRI, r3
 8003c6a:	f3bf 8f6f 	isb	sy
 8003c6e:	f3bf 8f4f 	dsb	sy
 8003c72:	60fb      	str	r3, [r7, #12]
}
 8003c74:	bf00      	nop
 8003c76:	bf00      	nop
 8003c78:	e7fd      	b.n	8003c76 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003c7a:	4b39      	ldr	r3, [pc, #228]	@ (8003d60 <xPortStartScheduler+0x130>)
 8003c7c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	22ff      	movs	r2, #255	@ 0xff
 8003c8a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003c94:	78fb      	ldrb	r3, [r7, #3]
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003c9c:	b2da      	uxtb	r2, r3
 8003c9e:	4b31      	ldr	r3, [pc, #196]	@ (8003d64 <xPortStartScheduler+0x134>)
 8003ca0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003ca2:	4b31      	ldr	r3, [pc, #196]	@ (8003d68 <xPortStartScheduler+0x138>)
 8003ca4:	2207      	movs	r2, #7
 8003ca6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003ca8:	e009      	b.n	8003cbe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8003caa:	4b2f      	ldr	r3, [pc, #188]	@ (8003d68 <xPortStartScheduler+0x138>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	4a2d      	ldr	r2, [pc, #180]	@ (8003d68 <xPortStartScheduler+0x138>)
 8003cb2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003cb4:	78fb      	ldrb	r3, [r7, #3]
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	005b      	lsls	r3, r3, #1
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003cbe:	78fb      	ldrb	r3, [r7, #3]
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cc6:	2b80      	cmp	r3, #128	@ 0x80
 8003cc8:	d0ef      	beq.n	8003caa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003cca:	4b27      	ldr	r3, [pc, #156]	@ (8003d68 <xPortStartScheduler+0x138>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f1c3 0307 	rsb	r3, r3, #7
 8003cd2:	2b04      	cmp	r3, #4
 8003cd4:	d00b      	beq.n	8003cee <xPortStartScheduler+0xbe>
	__asm volatile
 8003cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cda:	f383 8811 	msr	BASEPRI, r3
 8003cde:	f3bf 8f6f 	isb	sy
 8003ce2:	f3bf 8f4f 	dsb	sy
 8003ce6:	60bb      	str	r3, [r7, #8]
}
 8003ce8:	bf00      	nop
 8003cea:	bf00      	nop
 8003cec:	e7fd      	b.n	8003cea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003cee:	4b1e      	ldr	r3, [pc, #120]	@ (8003d68 <xPortStartScheduler+0x138>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	021b      	lsls	r3, r3, #8
 8003cf4:	4a1c      	ldr	r2, [pc, #112]	@ (8003d68 <xPortStartScheduler+0x138>)
 8003cf6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003cf8:	4b1b      	ldr	r3, [pc, #108]	@ (8003d68 <xPortStartScheduler+0x138>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003d00:	4a19      	ldr	r2, [pc, #100]	@ (8003d68 <xPortStartScheduler+0x138>)
 8003d02:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	b2da      	uxtb	r2, r3
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003d0c:	4b17      	ldr	r3, [pc, #92]	@ (8003d6c <xPortStartScheduler+0x13c>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a16      	ldr	r2, [pc, #88]	@ (8003d6c <xPortStartScheduler+0x13c>)
 8003d12:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003d16:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003d18:	4b14      	ldr	r3, [pc, #80]	@ (8003d6c <xPortStartScheduler+0x13c>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a13      	ldr	r2, [pc, #76]	@ (8003d6c <xPortStartScheduler+0x13c>)
 8003d1e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003d22:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003d24:	f000 f8da 	bl	8003edc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003d28:	4b11      	ldr	r3, [pc, #68]	@ (8003d70 <xPortStartScheduler+0x140>)
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003d2e:	f000 f8f9 	bl	8003f24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003d32:	4b10      	ldr	r3, [pc, #64]	@ (8003d74 <xPortStartScheduler+0x144>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a0f      	ldr	r2, [pc, #60]	@ (8003d74 <xPortStartScheduler+0x144>)
 8003d38:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003d3c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003d3e:	f7ff ff63 	bl	8003c08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003d42:	f7ff fce1 	bl	8003708 <vTaskSwitchContext>
	prvTaskExitError();
 8003d46:	f7ff ff1d 	bl	8003b84 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3718      	adds	r7, #24
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	e000ed00 	.word	0xe000ed00
 8003d58:	410fc271 	.word	0x410fc271
 8003d5c:	410fc270 	.word	0x410fc270
 8003d60:	e000e400 	.word	0xe000e400
 8003d64:	2000052c 	.word	0x2000052c
 8003d68:	20000530 	.word	0x20000530
 8003d6c:	e000ed20 	.word	0xe000ed20
 8003d70:	2000000c 	.word	0x2000000c
 8003d74:	e000ef34 	.word	0xe000ef34

08003d78 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
	__asm volatile
 8003d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d82:	f383 8811 	msr	BASEPRI, r3
 8003d86:	f3bf 8f6f 	isb	sy
 8003d8a:	f3bf 8f4f 	dsb	sy
 8003d8e:	607b      	str	r3, [r7, #4]
}
 8003d90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003d92:	4b10      	ldr	r3, [pc, #64]	@ (8003dd4 <vPortEnterCritical+0x5c>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	3301      	adds	r3, #1
 8003d98:	4a0e      	ldr	r2, [pc, #56]	@ (8003dd4 <vPortEnterCritical+0x5c>)
 8003d9a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003d9c:	4b0d      	ldr	r3, [pc, #52]	@ (8003dd4 <vPortEnterCritical+0x5c>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d110      	bne.n	8003dc6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003da4:	4b0c      	ldr	r3, [pc, #48]	@ (8003dd8 <vPortEnterCritical+0x60>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00b      	beq.n	8003dc6 <vPortEnterCritical+0x4e>
	__asm volatile
 8003dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003db2:	f383 8811 	msr	BASEPRI, r3
 8003db6:	f3bf 8f6f 	isb	sy
 8003dba:	f3bf 8f4f 	dsb	sy
 8003dbe:	603b      	str	r3, [r7, #0]
}
 8003dc0:	bf00      	nop
 8003dc2:	bf00      	nop
 8003dc4:	e7fd      	b.n	8003dc2 <vPortEnterCritical+0x4a>
	}
}
 8003dc6:	bf00      	nop
 8003dc8:	370c      	adds	r7, #12
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	2000000c 	.word	0x2000000c
 8003dd8:	e000ed04 	.word	0xe000ed04

08003ddc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003de2:	4b12      	ldr	r3, [pc, #72]	@ (8003e2c <vPortExitCritical+0x50>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d10b      	bne.n	8003e02 <vPortExitCritical+0x26>
	__asm volatile
 8003dea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dee:	f383 8811 	msr	BASEPRI, r3
 8003df2:	f3bf 8f6f 	isb	sy
 8003df6:	f3bf 8f4f 	dsb	sy
 8003dfa:	607b      	str	r3, [r7, #4]
}
 8003dfc:	bf00      	nop
 8003dfe:	bf00      	nop
 8003e00:	e7fd      	b.n	8003dfe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003e02:	4b0a      	ldr	r3, [pc, #40]	@ (8003e2c <vPortExitCritical+0x50>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	3b01      	subs	r3, #1
 8003e08:	4a08      	ldr	r2, [pc, #32]	@ (8003e2c <vPortExitCritical+0x50>)
 8003e0a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003e0c:	4b07      	ldr	r3, [pc, #28]	@ (8003e2c <vPortExitCritical+0x50>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d105      	bne.n	8003e20 <vPortExitCritical+0x44>
 8003e14:	2300      	movs	r3, #0
 8003e16:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003e1e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003e20:	bf00      	nop
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr
 8003e2c:	2000000c 	.word	0x2000000c

08003e30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003e30:	f3ef 8009 	mrs	r0, PSP
 8003e34:	f3bf 8f6f 	isb	sy
 8003e38:	4b15      	ldr	r3, [pc, #84]	@ (8003e90 <pxCurrentTCBConst>)
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	f01e 0f10 	tst.w	lr, #16
 8003e40:	bf08      	it	eq
 8003e42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003e46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e4a:	6010      	str	r0, [r2, #0]
 8003e4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003e50:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003e54:	f380 8811 	msr	BASEPRI, r0
 8003e58:	f3bf 8f4f 	dsb	sy
 8003e5c:	f3bf 8f6f 	isb	sy
 8003e60:	f7ff fc52 	bl	8003708 <vTaskSwitchContext>
 8003e64:	f04f 0000 	mov.w	r0, #0
 8003e68:	f380 8811 	msr	BASEPRI, r0
 8003e6c:	bc09      	pop	{r0, r3}
 8003e6e:	6819      	ldr	r1, [r3, #0]
 8003e70:	6808      	ldr	r0, [r1, #0]
 8003e72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e76:	f01e 0f10 	tst.w	lr, #16
 8003e7a:	bf08      	it	eq
 8003e7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003e80:	f380 8809 	msr	PSP, r0
 8003e84:	f3bf 8f6f 	isb	sy
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	f3af 8000 	nop.w

08003e90 <pxCurrentTCBConst>:
 8003e90:	20000400 	.word	0x20000400
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003e94:	bf00      	nop
 8003e96:	bf00      	nop

08003e98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
	__asm volatile
 8003e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ea2:	f383 8811 	msr	BASEPRI, r3
 8003ea6:	f3bf 8f6f 	isb	sy
 8003eaa:	f3bf 8f4f 	dsb	sy
 8003eae:	607b      	str	r3, [r7, #4]
}
 8003eb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003eb2:	f7ff fb6f 	bl	8003594 <xTaskIncrementTick>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d003      	beq.n	8003ec4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003ebc:	4b06      	ldr	r3, [pc, #24]	@ (8003ed8 <SysTick_Handler+0x40>)
 8003ebe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ec2:	601a      	str	r2, [r3, #0]
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	f383 8811 	msr	BASEPRI, r3
}
 8003ece:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003ed0:	bf00      	nop
 8003ed2:	3708      	adds	r7, #8
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	e000ed04 	.word	0xe000ed04

08003edc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003edc:	b480      	push	{r7}
 8003ede:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8003f10 <vPortSetupTimerInterrupt+0x34>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003ee6:	4b0b      	ldr	r3, [pc, #44]	@ (8003f14 <vPortSetupTimerInterrupt+0x38>)
 8003ee8:	2200      	movs	r2, #0
 8003eea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003eec:	4b0a      	ldr	r3, [pc, #40]	@ (8003f18 <vPortSetupTimerInterrupt+0x3c>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a0a      	ldr	r2, [pc, #40]	@ (8003f1c <vPortSetupTimerInterrupt+0x40>)
 8003ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef6:	099b      	lsrs	r3, r3, #6
 8003ef8:	4a09      	ldr	r2, [pc, #36]	@ (8003f20 <vPortSetupTimerInterrupt+0x44>)
 8003efa:	3b01      	subs	r3, #1
 8003efc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003efe:	4b04      	ldr	r3, [pc, #16]	@ (8003f10 <vPortSetupTimerInterrupt+0x34>)
 8003f00:	2207      	movs	r2, #7
 8003f02:	601a      	str	r2, [r3, #0]
}
 8003f04:	bf00      	nop
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	e000e010 	.word	0xe000e010
 8003f14:	e000e018 	.word	0xe000e018
 8003f18:	20000000 	.word	0x20000000
 8003f1c:	10624dd3 	.word	0x10624dd3
 8003f20:	e000e014 	.word	0xe000e014

08003f24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003f24:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003f34 <vPortEnableVFP+0x10>
 8003f28:	6801      	ldr	r1, [r0, #0]
 8003f2a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8003f2e:	6001      	str	r1, [r0, #0]
 8003f30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003f32:	bf00      	nop
 8003f34:	e000ed88 	.word	0xe000ed88

08003f38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b08a      	sub	sp, #40	@ 0x28
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003f40:	2300      	movs	r3, #0
 8003f42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003f44:	f7ff fa7a 	bl	800343c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003f48:	4b5c      	ldr	r3, [pc, #368]	@ (80040bc <pvPortMalloc+0x184>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d101      	bne.n	8003f54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003f50:	f000 f924 	bl	800419c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003f54:	4b5a      	ldr	r3, [pc, #360]	@ (80040c0 <pvPortMalloc+0x188>)
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f040 8095 	bne.w	800408c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d01e      	beq.n	8003fa6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003f68:	2208      	movs	r2, #8
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f003 0307 	and.w	r3, r3, #7
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d015      	beq.n	8003fa6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f023 0307 	bic.w	r3, r3, #7
 8003f80:	3308      	adds	r3, #8
 8003f82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f003 0307 	and.w	r3, r3, #7
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00b      	beq.n	8003fa6 <pvPortMalloc+0x6e>
	__asm volatile
 8003f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f92:	f383 8811 	msr	BASEPRI, r3
 8003f96:	f3bf 8f6f 	isb	sy
 8003f9a:	f3bf 8f4f 	dsb	sy
 8003f9e:	617b      	str	r3, [r7, #20]
}
 8003fa0:	bf00      	nop
 8003fa2:	bf00      	nop
 8003fa4:	e7fd      	b.n	8003fa2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d06f      	beq.n	800408c <pvPortMalloc+0x154>
 8003fac:	4b45      	ldr	r3, [pc, #276]	@ (80040c4 <pvPortMalloc+0x18c>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d86a      	bhi.n	800408c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003fb6:	4b44      	ldr	r3, [pc, #272]	@ (80040c8 <pvPortMalloc+0x190>)
 8003fb8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003fba:	4b43      	ldr	r3, [pc, #268]	@ (80040c8 <pvPortMalloc+0x190>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003fc0:	e004      	b.n	8003fcc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8003fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d903      	bls.n	8003fde <pvPortMalloc+0xa6>
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1f1      	bne.n	8003fc2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003fde:	4b37      	ldr	r3, [pc, #220]	@ (80040bc <pvPortMalloc+0x184>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d051      	beq.n	800408c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003fe8:	6a3b      	ldr	r3, [r7, #32]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2208      	movs	r2, #8
 8003fee:	4413      	add	r3, r2
 8003ff0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	6a3b      	ldr	r3, [r7, #32]
 8003ff8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ffc:	685a      	ldr	r2, [r3, #4]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	1ad2      	subs	r2, r2, r3
 8004002:	2308      	movs	r3, #8
 8004004:	005b      	lsls	r3, r3, #1
 8004006:	429a      	cmp	r2, r3
 8004008:	d920      	bls.n	800404c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800400a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4413      	add	r3, r2
 8004010:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	f003 0307 	and.w	r3, r3, #7
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00b      	beq.n	8004034 <pvPortMalloc+0xfc>
	__asm volatile
 800401c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004020:	f383 8811 	msr	BASEPRI, r3
 8004024:	f3bf 8f6f 	isb	sy
 8004028:	f3bf 8f4f 	dsb	sy
 800402c:	613b      	str	r3, [r7, #16]
}
 800402e:	bf00      	nop
 8004030:	bf00      	nop
 8004032:	e7fd      	b.n	8004030 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004036:	685a      	ldr	r2, [r3, #4]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	1ad2      	subs	r2, r2, r3
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004046:	69b8      	ldr	r0, [r7, #24]
 8004048:	f000 f90a 	bl	8004260 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800404c:	4b1d      	ldr	r3, [pc, #116]	@ (80040c4 <pvPortMalloc+0x18c>)
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	4a1b      	ldr	r2, [pc, #108]	@ (80040c4 <pvPortMalloc+0x18c>)
 8004058:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800405a:	4b1a      	ldr	r3, [pc, #104]	@ (80040c4 <pvPortMalloc+0x18c>)
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	4b1b      	ldr	r3, [pc, #108]	@ (80040cc <pvPortMalloc+0x194>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	429a      	cmp	r2, r3
 8004064:	d203      	bcs.n	800406e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004066:	4b17      	ldr	r3, [pc, #92]	@ (80040c4 <pvPortMalloc+0x18c>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a18      	ldr	r2, [pc, #96]	@ (80040cc <pvPortMalloc+0x194>)
 800406c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800406e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004070:	685a      	ldr	r2, [r3, #4]
 8004072:	4b13      	ldr	r3, [pc, #76]	@ (80040c0 <pvPortMalloc+0x188>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	431a      	orrs	r2, r3
 8004078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800407a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800407c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800407e:	2200      	movs	r2, #0
 8004080:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004082:	4b13      	ldr	r3, [pc, #76]	@ (80040d0 <pvPortMalloc+0x198>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	3301      	adds	r3, #1
 8004088:	4a11      	ldr	r2, [pc, #68]	@ (80040d0 <pvPortMalloc+0x198>)
 800408a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800408c:	f7ff f9e4 	bl	8003458 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	f003 0307 	and.w	r3, r3, #7
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00b      	beq.n	80040b2 <pvPortMalloc+0x17a>
	__asm volatile
 800409a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800409e:	f383 8811 	msr	BASEPRI, r3
 80040a2:	f3bf 8f6f 	isb	sy
 80040a6:	f3bf 8f4f 	dsb	sy
 80040aa:	60fb      	str	r3, [r7, #12]
}
 80040ac:	bf00      	nop
 80040ae:	bf00      	nop
 80040b0:	e7fd      	b.n	80040ae <pvPortMalloc+0x176>
	return pvReturn;
 80040b2:	69fb      	ldr	r3, [r7, #28]
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3728      	adds	r7, #40	@ 0x28
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	2000413c 	.word	0x2000413c
 80040c0:	20004150 	.word	0x20004150
 80040c4:	20004140 	.word	0x20004140
 80040c8:	20004134 	.word	0x20004134
 80040cc:	20004144 	.word	0x20004144
 80040d0:	20004148 	.word	0x20004148

080040d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b086      	sub	sp, #24
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d04f      	beq.n	8004186 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80040e6:	2308      	movs	r3, #8
 80040e8:	425b      	negs	r3, r3
 80040ea:	697a      	ldr	r2, [r7, #20]
 80040ec:	4413      	add	r3, r2
 80040ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	685a      	ldr	r2, [r3, #4]
 80040f8:	4b25      	ldr	r3, [pc, #148]	@ (8004190 <vPortFree+0xbc>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4013      	ands	r3, r2
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d10b      	bne.n	800411a <vPortFree+0x46>
	__asm volatile
 8004102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004106:	f383 8811 	msr	BASEPRI, r3
 800410a:	f3bf 8f6f 	isb	sy
 800410e:	f3bf 8f4f 	dsb	sy
 8004112:	60fb      	str	r3, [r7, #12]
}
 8004114:	bf00      	nop
 8004116:	bf00      	nop
 8004118:	e7fd      	b.n	8004116 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00b      	beq.n	800413a <vPortFree+0x66>
	__asm volatile
 8004122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004126:	f383 8811 	msr	BASEPRI, r3
 800412a:	f3bf 8f6f 	isb	sy
 800412e:	f3bf 8f4f 	dsb	sy
 8004132:	60bb      	str	r3, [r7, #8]
}
 8004134:	bf00      	nop
 8004136:	bf00      	nop
 8004138:	e7fd      	b.n	8004136 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	685a      	ldr	r2, [r3, #4]
 800413e:	4b14      	ldr	r3, [pc, #80]	@ (8004190 <vPortFree+0xbc>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4013      	ands	r3, r2
 8004144:	2b00      	cmp	r3, #0
 8004146:	d01e      	beq.n	8004186 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d11a      	bne.n	8004186 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	685a      	ldr	r2, [r3, #4]
 8004154:	4b0e      	ldr	r3, [pc, #56]	@ (8004190 <vPortFree+0xbc>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	43db      	mvns	r3, r3
 800415a:	401a      	ands	r2, r3
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004160:	f7ff f96c 	bl	800343c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	685a      	ldr	r2, [r3, #4]
 8004168:	4b0a      	ldr	r3, [pc, #40]	@ (8004194 <vPortFree+0xc0>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4413      	add	r3, r2
 800416e:	4a09      	ldr	r2, [pc, #36]	@ (8004194 <vPortFree+0xc0>)
 8004170:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004172:	6938      	ldr	r0, [r7, #16]
 8004174:	f000 f874 	bl	8004260 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004178:	4b07      	ldr	r3, [pc, #28]	@ (8004198 <vPortFree+0xc4>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	3301      	adds	r3, #1
 800417e:	4a06      	ldr	r2, [pc, #24]	@ (8004198 <vPortFree+0xc4>)
 8004180:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004182:	f7ff f969 	bl	8003458 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004186:	bf00      	nop
 8004188:	3718      	adds	r7, #24
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	20004150 	.word	0x20004150
 8004194:	20004140 	.word	0x20004140
 8004198:	2000414c 	.word	0x2000414c

0800419c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800419c:	b480      	push	{r7}
 800419e:	b085      	sub	sp, #20
 80041a0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80041a2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80041a6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80041a8:	4b27      	ldr	r3, [pc, #156]	@ (8004248 <prvHeapInit+0xac>)
 80041aa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f003 0307 	and.w	r3, r3, #7
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00c      	beq.n	80041d0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	3307      	adds	r3, #7
 80041ba:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f023 0307 	bic.w	r3, r3, #7
 80041c2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80041c4:	68ba      	ldr	r2, [r7, #8]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	4a1f      	ldr	r2, [pc, #124]	@ (8004248 <prvHeapInit+0xac>)
 80041cc:	4413      	add	r3, r2
 80041ce:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80041d4:	4a1d      	ldr	r2, [pc, #116]	@ (800424c <prvHeapInit+0xb0>)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80041da:	4b1c      	ldr	r3, [pc, #112]	@ (800424c <prvHeapInit+0xb0>)
 80041dc:	2200      	movs	r2, #0
 80041de:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	68ba      	ldr	r2, [r7, #8]
 80041e4:	4413      	add	r3, r2
 80041e6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80041e8:	2208      	movs	r2, #8
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	1a9b      	subs	r3, r3, r2
 80041ee:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f023 0307 	bic.w	r3, r3, #7
 80041f6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	4a15      	ldr	r2, [pc, #84]	@ (8004250 <prvHeapInit+0xb4>)
 80041fc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80041fe:	4b14      	ldr	r3, [pc, #80]	@ (8004250 <prvHeapInit+0xb4>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2200      	movs	r2, #0
 8004204:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004206:	4b12      	ldr	r3, [pc, #72]	@ (8004250 <prvHeapInit+0xb4>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2200      	movs	r2, #0
 800420c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	68fa      	ldr	r2, [r7, #12]
 8004216:	1ad2      	subs	r2, r2, r3
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800421c:	4b0c      	ldr	r3, [pc, #48]	@ (8004250 <prvHeapInit+0xb4>)
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	4a0a      	ldr	r2, [pc, #40]	@ (8004254 <prvHeapInit+0xb8>)
 800422a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	4a09      	ldr	r2, [pc, #36]	@ (8004258 <prvHeapInit+0xbc>)
 8004232:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004234:	4b09      	ldr	r3, [pc, #36]	@ (800425c <prvHeapInit+0xc0>)
 8004236:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800423a:	601a      	str	r2, [r3, #0]
}
 800423c:	bf00      	nop
 800423e:	3714      	adds	r7, #20
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr
 8004248:	20000534 	.word	0x20000534
 800424c:	20004134 	.word	0x20004134
 8004250:	2000413c 	.word	0x2000413c
 8004254:	20004144 	.word	0x20004144
 8004258:	20004140 	.word	0x20004140
 800425c:	20004150 	.word	0x20004150

08004260 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004260:	b480      	push	{r7}
 8004262:	b085      	sub	sp, #20
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004268:	4b28      	ldr	r3, [pc, #160]	@ (800430c <prvInsertBlockIntoFreeList+0xac>)
 800426a:	60fb      	str	r3, [r7, #12]
 800426c:	e002      	b.n	8004274 <prvInsertBlockIntoFreeList+0x14>
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	60fb      	str	r3, [r7, #12]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	429a      	cmp	r2, r3
 800427c:	d8f7      	bhi.n	800426e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	68ba      	ldr	r2, [r7, #8]
 8004288:	4413      	add	r3, r2
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	429a      	cmp	r2, r3
 800428e:	d108      	bne.n	80042a2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	685a      	ldr	r2, [r3, #4]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	441a      	add	r2, r3
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	68ba      	ldr	r2, [r7, #8]
 80042ac:	441a      	add	r2, r3
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d118      	bne.n	80042e8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	4b15      	ldr	r3, [pc, #84]	@ (8004310 <prvInsertBlockIntoFreeList+0xb0>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d00d      	beq.n	80042de <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685a      	ldr	r2, [r3, #4]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	441a      	add	r2, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	601a      	str	r2, [r3, #0]
 80042dc:	e008      	b.n	80042f0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80042de:	4b0c      	ldr	r3, [pc, #48]	@ (8004310 <prvInsertBlockIntoFreeList+0xb0>)
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	601a      	str	r2, [r3, #0]
 80042e6:	e003      	b.n	80042f0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d002      	beq.n	80042fe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80042fe:	bf00      	nop
 8004300:	3714      	adds	r7, #20
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	20004134 	.word	0x20004134
 8004310:	2000413c 	.word	0x2000413c

08004314 <memset>:
 8004314:	4402      	add	r2, r0
 8004316:	4603      	mov	r3, r0
 8004318:	4293      	cmp	r3, r2
 800431a:	d100      	bne.n	800431e <memset+0xa>
 800431c:	4770      	bx	lr
 800431e:	f803 1b01 	strb.w	r1, [r3], #1
 8004322:	e7f9      	b.n	8004318 <memset+0x4>

08004324 <_reclaim_reent>:
 8004324:	4b29      	ldr	r3, [pc, #164]	@ (80043cc <_reclaim_reent+0xa8>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4283      	cmp	r3, r0
 800432a:	b570      	push	{r4, r5, r6, lr}
 800432c:	4604      	mov	r4, r0
 800432e:	d04b      	beq.n	80043c8 <_reclaim_reent+0xa4>
 8004330:	69c3      	ldr	r3, [r0, #28]
 8004332:	b1ab      	cbz	r3, 8004360 <_reclaim_reent+0x3c>
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	b16b      	cbz	r3, 8004354 <_reclaim_reent+0x30>
 8004338:	2500      	movs	r5, #0
 800433a:	69e3      	ldr	r3, [r4, #28]
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	5959      	ldr	r1, [r3, r5]
 8004340:	2900      	cmp	r1, #0
 8004342:	d13b      	bne.n	80043bc <_reclaim_reent+0x98>
 8004344:	3504      	adds	r5, #4
 8004346:	2d80      	cmp	r5, #128	@ 0x80
 8004348:	d1f7      	bne.n	800433a <_reclaim_reent+0x16>
 800434a:	69e3      	ldr	r3, [r4, #28]
 800434c:	4620      	mov	r0, r4
 800434e:	68d9      	ldr	r1, [r3, #12]
 8004350:	f000 f864 	bl	800441c <_free_r>
 8004354:	69e3      	ldr	r3, [r4, #28]
 8004356:	6819      	ldr	r1, [r3, #0]
 8004358:	b111      	cbz	r1, 8004360 <_reclaim_reent+0x3c>
 800435a:	4620      	mov	r0, r4
 800435c:	f000 f85e 	bl	800441c <_free_r>
 8004360:	6961      	ldr	r1, [r4, #20]
 8004362:	b111      	cbz	r1, 800436a <_reclaim_reent+0x46>
 8004364:	4620      	mov	r0, r4
 8004366:	f000 f859 	bl	800441c <_free_r>
 800436a:	69e1      	ldr	r1, [r4, #28]
 800436c:	b111      	cbz	r1, 8004374 <_reclaim_reent+0x50>
 800436e:	4620      	mov	r0, r4
 8004370:	f000 f854 	bl	800441c <_free_r>
 8004374:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004376:	b111      	cbz	r1, 800437e <_reclaim_reent+0x5a>
 8004378:	4620      	mov	r0, r4
 800437a:	f000 f84f 	bl	800441c <_free_r>
 800437e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004380:	b111      	cbz	r1, 8004388 <_reclaim_reent+0x64>
 8004382:	4620      	mov	r0, r4
 8004384:	f000 f84a 	bl	800441c <_free_r>
 8004388:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800438a:	b111      	cbz	r1, 8004392 <_reclaim_reent+0x6e>
 800438c:	4620      	mov	r0, r4
 800438e:	f000 f845 	bl	800441c <_free_r>
 8004392:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8004394:	b111      	cbz	r1, 800439c <_reclaim_reent+0x78>
 8004396:	4620      	mov	r0, r4
 8004398:	f000 f840 	bl	800441c <_free_r>
 800439c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800439e:	b111      	cbz	r1, 80043a6 <_reclaim_reent+0x82>
 80043a0:	4620      	mov	r0, r4
 80043a2:	f000 f83b 	bl	800441c <_free_r>
 80043a6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80043a8:	b111      	cbz	r1, 80043b0 <_reclaim_reent+0x8c>
 80043aa:	4620      	mov	r0, r4
 80043ac:	f000 f836 	bl	800441c <_free_r>
 80043b0:	6a23      	ldr	r3, [r4, #32]
 80043b2:	b14b      	cbz	r3, 80043c8 <_reclaim_reent+0xa4>
 80043b4:	4620      	mov	r0, r4
 80043b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80043ba:	4718      	bx	r3
 80043bc:	680e      	ldr	r6, [r1, #0]
 80043be:	4620      	mov	r0, r4
 80043c0:	f000 f82c 	bl	800441c <_free_r>
 80043c4:	4631      	mov	r1, r6
 80043c6:	e7bb      	b.n	8004340 <_reclaim_reent+0x1c>
 80043c8:	bd70      	pop	{r4, r5, r6, pc}
 80043ca:	bf00      	nop
 80043cc:	20000010 	.word	0x20000010

080043d0 <__libc_init_array>:
 80043d0:	b570      	push	{r4, r5, r6, lr}
 80043d2:	4d0d      	ldr	r5, [pc, #52]	@ (8004408 <__libc_init_array+0x38>)
 80043d4:	4c0d      	ldr	r4, [pc, #52]	@ (800440c <__libc_init_array+0x3c>)
 80043d6:	1b64      	subs	r4, r4, r5
 80043d8:	10a4      	asrs	r4, r4, #2
 80043da:	2600      	movs	r6, #0
 80043dc:	42a6      	cmp	r6, r4
 80043de:	d109      	bne.n	80043f4 <__libc_init_array+0x24>
 80043e0:	4d0b      	ldr	r5, [pc, #44]	@ (8004410 <__libc_init_array+0x40>)
 80043e2:	4c0c      	ldr	r4, [pc, #48]	@ (8004414 <__libc_init_array+0x44>)
 80043e4:	f000 f870 	bl	80044c8 <_init>
 80043e8:	1b64      	subs	r4, r4, r5
 80043ea:	10a4      	asrs	r4, r4, #2
 80043ec:	2600      	movs	r6, #0
 80043ee:	42a6      	cmp	r6, r4
 80043f0:	d105      	bne.n	80043fe <__libc_init_array+0x2e>
 80043f2:	bd70      	pop	{r4, r5, r6, pc}
 80043f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80043f8:	4798      	blx	r3
 80043fa:	3601      	adds	r6, #1
 80043fc:	e7ee      	b.n	80043dc <__libc_init_array+0xc>
 80043fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004402:	4798      	blx	r3
 8004404:	3601      	adds	r6, #1
 8004406:	e7f2      	b.n	80043ee <__libc_init_array+0x1e>
 8004408:	080045a0 	.word	0x080045a0
 800440c:	080045a0 	.word	0x080045a0
 8004410:	080045a0 	.word	0x080045a0
 8004414:	080045a4 	.word	0x080045a4

08004418 <__retarget_lock_acquire_recursive>:
 8004418:	4770      	bx	lr

0800441a <__retarget_lock_release_recursive>:
 800441a:	4770      	bx	lr

0800441c <_free_r>:
 800441c:	b538      	push	{r3, r4, r5, lr}
 800441e:	4605      	mov	r5, r0
 8004420:	2900      	cmp	r1, #0
 8004422:	d041      	beq.n	80044a8 <_free_r+0x8c>
 8004424:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004428:	1f0c      	subs	r4, r1, #4
 800442a:	2b00      	cmp	r3, #0
 800442c:	bfb8      	it	lt
 800442e:	18e4      	addlt	r4, r4, r3
 8004430:	f000 f83e 	bl	80044b0 <__malloc_lock>
 8004434:	4a1d      	ldr	r2, [pc, #116]	@ (80044ac <_free_r+0x90>)
 8004436:	6813      	ldr	r3, [r2, #0]
 8004438:	b933      	cbnz	r3, 8004448 <_free_r+0x2c>
 800443a:	6063      	str	r3, [r4, #4]
 800443c:	6014      	str	r4, [r2, #0]
 800443e:	4628      	mov	r0, r5
 8004440:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004444:	f000 b83a 	b.w	80044bc <__malloc_unlock>
 8004448:	42a3      	cmp	r3, r4
 800444a:	d908      	bls.n	800445e <_free_r+0x42>
 800444c:	6820      	ldr	r0, [r4, #0]
 800444e:	1821      	adds	r1, r4, r0
 8004450:	428b      	cmp	r3, r1
 8004452:	bf01      	itttt	eq
 8004454:	6819      	ldreq	r1, [r3, #0]
 8004456:	685b      	ldreq	r3, [r3, #4]
 8004458:	1809      	addeq	r1, r1, r0
 800445a:	6021      	streq	r1, [r4, #0]
 800445c:	e7ed      	b.n	800443a <_free_r+0x1e>
 800445e:	461a      	mov	r2, r3
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	b10b      	cbz	r3, 8004468 <_free_r+0x4c>
 8004464:	42a3      	cmp	r3, r4
 8004466:	d9fa      	bls.n	800445e <_free_r+0x42>
 8004468:	6811      	ldr	r1, [r2, #0]
 800446a:	1850      	adds	r0, r2, r1
 800446c:	42a0      	cmp	r0, r4
 800446e:	d10b      	bne.n	8004488 <_free_r+0x6c>
 8004470:	6820      	ldr	r0, [r4, #0]
 8004472:	4401      	add	r1, r0
 8004474:	1850      	adds	r0, r2, r1
 8004476:	4283      	cmp	r3, r0
 8004478:	6011      	str	r1, [r2, #0]
 800447a:	d1e0      	bne.n	800443e <_free_r+0x22>
 800447c:	6818      	ldr	r0, [r3, #0]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	6053      	str	r3, [r2, #4]
 8004482:	4408      	add	r0, r1
 8004484:	6010      	str	r0, [r2, #0]
 8004486:	e7da      	b.n	800443e <_free_r+0x22>
 8004488:	d902      	bls.n	8004490 <_free_r+0x74>
 800448a:	230c      	movs	r3, #12
 800448c:	602b      	str	r3, [r5, #0]
 800448e:	e7d6      	b.n	800443e <_free_r+0x22>
 8004490:	6820      	ldr	r0, [r4, #0]
 8004492:	1821      	adds	r1, r4, r0
 8004494:	428b      	cmp	r3, r1
 8004496:	bf04      	itt	eq
 8004498:	6819      	ldreq	r1, [r3, #0]
 800449a:	685b      	ldreq	r3, [r3, #4]
 800449c:	6063      	str	r3, [r4, #4]
 800449e:	bf04      	itt	eq
 80044a0:	1809      	addeq	r1, r1, r0
 80044a2:	6021      	streq	r1, [r4, #0]
 80044a4:	6054      	str	r4, [r2, #4]
 80044a6:	e7ca      	b.n	800443e <_free_r+0x22>
 80044a8:	bd38      	pop	{r3, r4, r5, pc}
 80044aa:	bf00      	nop
 80044ac:	20004290 	.word	0x20004290

080044b0 <__malloc_lock>:
 80044b0:	4801      	ldr	r0, [pc, #4]	@ (80044b8 <__malloc_lock+0x8>)
 80044b2:	f7ff bfb1 	b.w	8004418 <__retarget_lock_acquire_recursive>
 80044b6:	bf00      	nop
 80044b8:	2000428c 	.word	0x2000428c

080044bc <__malloc_unlock>:
 80044bc:	4801      	ldr	r0, [pc, #4]	@ (80044c4 <__malloc_unlock+0x8>)
 80044be:	f7ff bfac 	b.w	800441a <__retarget_lock_release_recursive>
 80044c2:	bf00      	nop
 80044c4:	2000428c 	.word	0x2000428c

080044c8 <_init>:
 80044c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ca:	bf00      	nop
 80044cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ce:	bc08      	pop	{r3}
 80044d0:	469e      	mov	lr, r3
 80044d2:	4770      	bx	lr

080044d4 <_fini>:
 80044d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044d6:	bf00      	nop
 80044d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044da:	bc08      	pop	{r3}
 80044dc:	469e      	mov	lr, r3
 80044de:	4770      	bx	lr
